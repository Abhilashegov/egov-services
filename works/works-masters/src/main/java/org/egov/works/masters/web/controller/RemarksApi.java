/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.egov.works.masters.web.controller;

import io.swagger.annotations.*;
import org.egov.works.masters.web.contract.ErrorRes;
import org.egov.works.masters.web.contract.RemarksRequest;
import org.egov.works.masters.web.contract.RemarksResponse;
import org.egov.works.masters.web.contract.RequestInfo;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-01-02T12:11:15.167Z")

@Api(value = "remarks", description = "the remarks API")
public interface RemarksApi {

    @ApiOperation(value = "Create new Remarks(s).", notes = "To create new Remarks in the system. API supports bulk creation with max limit as defined in the Remarks Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To create one Remarks, please pass array with one Remarks object. ", response = RemarksResponse.class, tags={ "Remarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Remarks(s) created successfully", response = RemarksResponse.class),
        @ApiResponse(code = 400, message = "Remarks(s) creation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/remarks/_create",
        method = RequestMethod.POST)
    ResponseEntity<RemarksResponse> remarksCreatePost(@ApiParam(value = "Details of new Remarks(s) + RequestInfo meta data.", required = true) @Valid @RequestBody RemarksRequest remarksRequest);


    @ApiOperation(value = "Get the list of Remarks(s) defined in the system.", notes = "Search and get Remarks(s) based on defined search criteria. Currently search parameters are only allowed as HTTP query params.  In case multiple parameters are passed Remarks(s) will be searched as an AND combination of all the parameters.  Maximum result size is restricted based on the maxlength of Notice as defined in RemarksResponse model.  Search results will be sorted by the sortProperty Provided in the parameters ", response = RemarksResponse.class, tags={ "Remarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Remarks(s) Retrieved Successfully", response = RemarksResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    
    @RequestMapping(value = "/remarks/_search",
        method = RequestMethod.POST)
    ResponseEntity<RemarksResponse> remarksSearchPost(@NotNull @ApiParam(value = "Unique id for a tenant.", required = true) @RequestParam(value = "tenantId", required = true) String tenantId, @ApiParam(value = "Parameter to carry Request metadata in the request body") @Valid @RequestBody RequestInfo requestInfo, @Min(0) @Max(100) @ApiParam(value = "Number of records returned.", defaultValue = "20") @RequestParam(value = "pageSize", required = false, defaultValue = "20") Integer pageSize, @ApiParam(value = "Page number", defaultValue = "1") @RequestParam(value = "pageNumber", required = false, defaultValue = "1") Integer pageNumber, @ApiParam(value = "This takes any field from the Object seperated by comma and asc,desc keywords. example name asc,code desc or name,code or name,code desc", defaultValue = "id") @RequestParam(value = "sortBy", required = false, defaultValue = "id") String sortBy, @Size(max = 50) @ApiParam(value = "Comma separated list of Ids of Remarks to get the Remarks") @RequestParam(value = "ids", required = false) List<String> ids, @ApiParam(value = "The document type of the remarks.") @RequestParam(value = "typeOfDocument", required = false) String typeOfDocument, @ApiParam(value = "remarks type of the remarks.") @RequestParam(value = "remarksType", required = false) String remarksType, @ApiParam(value = "Remarks Condition") @RequestParam(value = "remarksDescription", required = false) String remarksDescription);


    @ApiOperation(value = "Update existing Remarks(s).", notes = "To update existing Remarks in the system. API supports bulk updation with max limit as defined in the Remarks Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To update one Remarks, please pass array with one Remarks object. In updade fields can be modified based on confguration defined in the system. ", response = RemarksResponse.class, tags={ "Remarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Remarks(s) updated successfully", response = RemarksResponse.class),
        @ApiResponse(code = 400, message = "Remarks(s) updation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/remarks/_update",
        method = RequestMethod.POST)
    ResponseEntity<RemarksResponse> remarksUpdatePost(@ApiParam(value = "Details of Remarks(s) + RequestInfo meta data.", required = true) @Valid @RequestBody RemarksRequest remarksRequest);

}
