/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.egov.works.workorder.web.controller;

import io.swagger.annotations.*;
import org.egov.works.workorder.web.contract.ErrorRes;
import org.egov.works.workorder.web.contract.RequestInfo;
import org.egov.works.workorder.web.contract.TrackMilestoneRequest;
import org.egov.works.workorder.web.contract.TrackMilestoneResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-19T12:22:16.579Z")

@Api(value = "trackmilestones", description = "the trackmilestones API")
public interface TrackmilestonesApi {

    @ApiOperation(value = "Create new Track Milestone(s).", notes = "To create new Track Milestone in the system. API supports bulk creation with max limit as defined in the Track Milestone Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To create one Track Milestone, please pass array with one Track Milestone object.  Track milestone can be used to capture the physical progress of the work for the milestone set for an LOA/Work Order. The user can update the Track Milestone multiple times till the work completion percentage reaches 100%. ", response = TrackMilestoneResponse.class, tags={ "Track Milestone", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Track Milestone(s) created successfully", response = TrackMilestoneResponse.class),
        @ApiResponse(code = 400, message = "Track Milestone(s) creation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/trackmilestones/_create",
        method = RequestMethod.POST)
    ResponseEntity<TrackMilestoneResponse> trackmilestonesCreatePost(@ApiParam(value = "Details of new Track Milestone(s) + RequestInfo meta data.", required = true) @Valid @RequestBody TrackMilestoneRequest trackMilestoneRequest);


    @ApiOperation(value = "Get the list of Track Milestone(s) defined in the system.", notes = "Search and get Track Milestone(s) based on defined search criteria. Currently search parameters are only allowed as HTTP query params.  In case multiple parameters are passed Track Milestone(s) will be searched as an AND combination of all the parameters.  Maximum result size is restricted based on the maxlength of Track Milestone as defined in Track MilestoneResponse model.  Search results will be sorted by the sortProperty provided in the parameters ", response = TrackMilestoneResponse.class, tags={ "Track Milestone", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Track Milestone(s) Retrieved Successfully", response = TrackMilestoneResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    
    @RequestMapping(value = "/trackmilestones/_search",
        method = RequestMethod.POST)
    ResponseEntity<TrackMilestoneResponse> trackmilestonesSearchPost(@NotNull @ApiParam(value = "Unique id for a tenant.", required = true) @RequestParam(value = "tenantId", required = true) String tenantId, @ApiParam(value = "Parameter to carry Request metadata in the request body") @Valid @RequestBody RequestInfo requestInfo, @Min(0) @Max(100) @ApiParam(value = "Number of records returned.", defaultValue = "20") @RequestParam(value = "pageSize", required = false, defaultValue = "20") Integer pageSize, @ApiParam(value = "Page number", defaultValue = "1") @RequestParam(value = "pageNumber", required = false, defaultValue = "1") Integer pageNumber, @ApiParam(value = "This takes any field from the Object seperated by comma and asc,desc keywords. example name asc,code desc or name,code or name,code desc", defaultValue = "id") @RequestParam(value = "sortBy", required = false, defaultValue = "id") String sortBy, @Size(max = 50) @ApiParam(value = "Comma separated list of Ids of Track Milestone to get the Track Milestones") @RequestParam(value = "ids", required = false) List<String> ids, @Size(max = 50) @ApiParam(value = "Status of the Track Milestone") @RequestParam(value = "statuses", required = false) List<String> statuses, @Size(max = 50) @ApiParam(value = "Comma separated list of Work Order Numbers") @RequestParam(value = "workOrderNumbers", required = false) List<String> workOrderNumbers, @Size(max = 50) @ApiParam(value = "Comma separated list of LOA Numbers") @RequestParam(value = "loaNumbers", required = false) List<String> loaNumbers, @Size(max = 50) @ApiParam(value = "Comma separated list of Detailed Estimate Numbers") @RequestParam(value = "detailedEstimateNumbers", required = false) List<String> detailedEstimateNumbers, @Size(max = 50) @ApiParam(value = "Comma separated list of Work Identification Numbers") @RequestParam(value = "workIdentificationNumbers", required = false) List<String> workIdentificationNumbers, @Size(max = 50) @ApiParam(value = "Comma separated list of the Department for which the Track Milestone belongs to") @RequestParam(value = "department", required = false) List<String> department, @Size(max = 50) @ApiParam(value = "Comma separated list of Names of the contractor to which Track Milestone belongs to") @RequestParam(value = "contractorNames", required = false) List<String> contractorNames, @Size(max = 50) @ApiParam(value = "Comma separated list of codes of the contractor to which Track Milestone belongs to") @RequestParam(value = "contractorCodes", required = false) List<String> contractorCodes);


    @ApiOperation(value = "Update existing Track Milestone(s).", notes = "To update existing Track Milestone in the system. API supports bulk updation with max limit as defined in the Track Milestone Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To update one Track Milestone, please pass array with one Track Milestone object. ", response = TrackMilestoneResponse.class, tags={ "Track Milestone", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Track Milestone(s) updated successfully", response = TrackMilestoneResponse.class),
        @ApiResponse(code = 400, message = "Track Milestone(s) updation failed", response = ErrorRes.class) })
    
    @RequestMapping(value = "/trackmilestones/_update",
        method = RequestMethod.POST)
    ResponseEntity<TrackMilestoneResponse> trackmilestonesUpdatePost(@ApiParam(value = "Details of Track Milestone(s) + RequestInfo meta data.", required = true) @Valid @RequestBody TrackMilestoneRequest trackMilestoneRequest);

}
