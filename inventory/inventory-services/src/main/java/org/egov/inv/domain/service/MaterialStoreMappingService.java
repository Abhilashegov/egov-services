package org.egov.inv.domain.service;import org.egov.common.Constants;import org.egov.common.DomainService;import org.egov.common.Pagination;import org.egov.common.exception.CustomBindException;import org.egov.common.exception.ErrorCode;import org.egov.common.exception.InvalidDataException;import org.egov.inv.model.*;import org.egov.inv.persistence.entity.MaterialStoreMappingEntity;import org.egov.inv.persistence.repository.MaterialStoreMappingJdbcRepository;import org.egov.tracer.model.CustomException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;import static org.springframework.util.StringUtils.isEmpty;@Servicepublic class MaterialStoreMappingService extends DomainService {    public static final String INV_001 = "inv.001";    public static final String STORE = "store";    public static final String MATERIAL = "material";    public static final String INV_005 = "inv.005";    public static final String INV_006 = "INV.006";    @Autowired    private MaterialStoreMappingJdbcRepository materialStoreMappingJdbcRepository;/*    @Autowired    private MaterialStoreESRepository materialESRepository;*/    @Autowired    private StoreService storeService;    @Value("${inv.materialstore.save.topic}")    private String saveTopic;    @Value("${inv.materialstore.save.key}")    private String saveKey;    @Value("${inv.materialstore.update.topic}")    private String updateTopic;    @Value("${inv.materialstore.update.key}")    private String updateKey;    @Value("${inv.materialstore.delete.topic}")    private String deleteTopic;    @Value("${inv.materialstore.delete.key}")    private String deletekey;    @Value("${es.enabled}")    private boolean isESEnabled;    @Value("${financial.enabled}")    private boolean isFinancialEnabled;    public MaterialStoreMappingResponse create(MaterialStoreMappingRequest materialStoreMappingRequest, String tenantId) {        try {            List<MaterialStoreMapping> materialStoreMappings = materialStoreMappingRequest.getMaterialStoreMappings();            validate(materialStoreMappings, Constants.ACTION_CREATE);            List<String> sequenceNos = materialStoreMappingJdbcRepository.getSequence(MaterialStoreMapping.class.getSimpleName(), materialStoreMappings.size());            int i = 0;            for (MaterialStoreMapping materialStoreMapping : materialStoreMappings) {                materialStoreMapping.setId(sequenceNos.get(i));                materialStoreMapping.setAuditDetails(mapAuditDetails(materialStoreMappingRequest.getRequestInfo()));                materialStoreMapping.setTenantId(tenantId);                i++;            }            kafkaQue.send(saveTopic, saveKey, materialStoreMappingRequest);            MaterialStoreMappingResponse materialStoreMappingResponse = new MaterialStoreMappingResponse();            materialStoreMappingResponse.setMaterialStoreMappings(materialStoreMappings);            materialStoreMappingResponse.setResponseInfo(getResponseInfo(materialStoreMappingRequest.getRequestInfo()));            return materialStoreMappingResponse;        } catch (CustomBindException e) {            throw e;        }    }    public MaterialStoreMappingResponse update(MaterialStoreMappingRequest materialStoreMappingRequest, String tenantId) {        try {            List<MaterialStoreMapping> deleteStoreMappings = materialStoreMappingRequest.getMaterialStoreMappings().stream()                    .filter(materialStoreMapping ->                            null != materialStoreMapping.getDelete() && materialStoreMapping.getDelete().equals(Boolean.TRUE))                    .collect(Collectors.toList());            if (deleteStoreMappings.size() > 0) {                deleteMaterialStore(materialStoreMappingRequest.getRequestInfo(), deleteStoreMappings, tenantId);                materialStoreMappingRequest.getMaterialStoreMappings().remove(deleteStoreMappings);            }            materialStoreMappingRequest.getMaterialStoreMappings().stream()                    .forEach(materialStoreMapping -> {                        materialStoreMapping.setAuditDetails(mapAuditDetails(materialStoreMappingRequest.getRequestInfo()));                        materialStoreMapping.setTenantId(tenantId);                        validateUpdateRequest(materialStoreMapping);                        buildMaterialStoreMapping(tenantId, materialStoreMapping);                    });            kafkaQue.send(updateTopic, updateKey, materialStoreMappingRequest);            MaterialStoreMappingResponse response = new MaterialStoreMappingResponse();            response.setResponseInfo(getResponseInfo(materialStoreMappingRequest.getRequestInfo()));            response.setMaterialStoreMappings(materialStoreMappingRequest.getMaterialStoreMappings());            return response;        } catch (CustomBindException e) {            throw e;        }    }    private void deleteMaterialStore(RequestInfo requestInfo, List<MaterialStoreMapping> materialStoreMappings, String tenantId) {        MaterialStoreMappingRequest storeMappingRequest = MaterialStoreMappingRequest.builder()                .requestInfo(requestInfo)                .materialStoreMappings(materialStoreMappings)                .build();        kafkaQue.send(deleteTopic, deletekey, storeMappingRequest);    }    public MaterialStoreMappingResponse search(MaterialStoreMappingSearch materialStoreMappingSearch, RequestInfo requestInfo) {        Pagination<MaterialStoreMapping> materialStoreMappingList = materialStoreMappingJdbcRepository.search(materialStoreMappingSearch);        materialStoreMappingList.getPagedData().stream()                .forEach(materialStoreMapping ->                        buildMaterialStoreMapping(materialStoreMappingSearch.getTenantId(), materialStoreMapping));        MaterialStoreMappingResponse response = new MaterialStoreMappingResponse();        response.setMaterialStoreMappings(materialStoreMappingList.getPagedData());        response.setResponseInfo(getResponseInfo(requestInfo));        return response;    }    private void validateUpdateRequest(MaterialStoreMapping materialStoreMapping) {        validateChartOfAccount(materialStoreMapping);        int size = findMaterialStore(materialStoreMapping.getTenantId(), materialStoreMapping).size();        if (size > 0) {            uniqueCheck(materialStoreMapping);        } else {            RequestInfo requestInfo = new RequestInfo();            UserInfo userInfo = new UserInfo();            userInfo.setId(Integer.valueOf(materialStoreMapping.getAuditDetails().getCreatedBy()));            requestInfo.setUserInfo(userInfo);            create(buildCreateRequest(materialStoreMapping, requestInfo), materialStoreMapping.getTenantId());        }    }    private MaterialStoreMappingRequest buildCreateRequest(MaterialStoreMapping materialStoreMapping, RequestInfo requestInfo) {        List<MaterialStoreMapping> materialStoreMappings = new ArrayList<>();        materialStoreMappings.add(materialStoreMapping);        return MaterialStoreMappingRequest.builder()                .requestInfo(requestInfo)                .materialStoreMappings(materialStoreMappings)                .build();    }    private void validateCreateRequest(MaterialStoreMapping materialStoreMapping) {        validateChartOfAccount(materialStoreMapping);        getStore(materialStoreMapping.getStore().getCode(), materialStoreMapping.getTenantId());        uniqueCheck(materialStoreMapping);    }    private void validateChartOfAccount(MaterialStoreMapping materialStoreMapping) {        if (isFinancialEnabled && isEmpty(materialStoreMapping.getChartofAccount().getGlCode())) {            throw new CustomException("inv.007", "Account Code is Mandatory ");        }    }    private List<MaterialStoreMapping> findMaterialStore(String tenantId, MaterialStoreMapping materialStoreMapping) {        MaterialStoreMappingSearch materialStoreMappingSearch = new MaterialStoreMappingSearch();        materialStoreMappingSearch.setMaterial(materialStoreMapping.getMaterial().getCode());        materialStoreMappingSearch.setStore(materialStoreMapping.getStore().getCode());        materialStoreMappingSearch.setTenantId(tenantId);        return materialStoreMappingJdbcRepository.search(materialStoreMappingSearch).getPagedData();    }    private void validate(List<MaterialStoreMapping> materialStoreMappings, String method) {        try {            switch (method) {                case Constants.ACTION_CREATE: {                    if (materialStoreMappings == null) {                        throw new InvalidDataException("materialstore", ErrorCode.NOT_NULL.getCode(), null);                    } else {                        materialStoreMappings.forEach(materialStoreMapping -> validateCreateRequest(materialStoreMapping));                    }                }                break;                case Constants.ACTION_UPDATE: {                    if (materialStoreMappings == null) {                        throw new InvalidDataException("materialstore", ErrorCode.NOT_NULL.getCode(), null);                    } else {                        materialStoreMappings.forEach(materialStoreMapping -> validateUpdateRequest(materialStoreMapping));                    }                }                break;            }        } catch (IllegalArgumentException e) {        }    }    private void buildMaterialStoreMapping(String tenantId, MaterialStoreMapping materialStoreMapping) {        Store store = getStore(materialStoreMapping.getStore().getCode(), tenantId);        materialStoreMapping.setStore(store);    }    private Store getStore(String storeCode, String tenantId) {        StoreGetRequest storeGetRequest = getStoreGetRequest(storeCode, tenantId);        List<Store> storeList = storeService.search(storeGetRequest).getStores();        if (null != storeList && storeList.size() > 0) {            return storeList.get(0);        } else {            throw new CustomException(INV_005, "Store Not Found " + storeCode);        }    }    private void uniqueCheck(MaterialStoreMapping materialStoreMapping) {        if (!materialStoreMappingJdbcRepository.uniqueCheck(MATERIAL, STORE, new MaterialStoreMappingEntity().toEntity(materialStoreMapping))) {            throw new CustomException(INV_001, "Combination of Code and Name Already Exists " + materialStoreMapping.getMaterial().getName()                    + ", " + materialStoreMapping.getStore().getName());        }    }    private StoreGetRequest getStoreGetRequest(String storeCode, String tenantId) {        return StoreGetRequest.builder()                .code(Arrays.asList(storeCode))                .tenantId(tenantId)                .build();    }}