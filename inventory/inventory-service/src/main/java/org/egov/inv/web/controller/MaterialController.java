package org.egov.inv.web.controller;import org.egov.common.contract.request.RequestInfo;import org.egov.common.contract.response.ResponseInfo;import org.egov.inv.domain.model.Material;import org.egov.inv.domain.model.MaterialSearchRequest;import org.egov.inv.domain.model.Pagination;import org.egov.inv.domain.service.MaterialService;import org.egov.inv.web.contract.MaterialRequest;import org.egov.inv.web.contract.MaterialResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.List;@RestController@RequestMapping("/materials")public class MaterialController {    private MaterialService materialService;    @Autowired    public MaterialController(MaterialService materialService) {        this.materialService = materialService;    }    @PostMapping("/_create")    public MaterialResponse create(@RequestBody @Valid MaterialRequest materialRequest,                                   @RequestParam(value = "tenantId") String tenantId) {        List<Material> materials = materialService.save(materialRequest, tenantId);        return buildMaterialResponse(materials, materialRequest.getRequestInfo());    }    @PostMapping("/_update")    public MaterialResponse update(@RequestBody @Valid MaterialRequest materialRequest,                                   @RequestParam(value = "tenantId") String tenantId) {        List<Material> materials = materialService.update(materialRequest, tenantId);        return buildMaterialResponse(materials, materialRequest.getRequestInfo());    }    @PostMapping("/_search")    public MaterialResponse search(@RequestBody RequestInfo requestInfo,                                   @RequestParam(value = "tenantId") String tenantId,                                   @RequestParam(value = "ids", required = false) List<String> ids,                                   @RequestParam(value = "code", required = false) String code,                                   @RequestParam(value = "name", required = false) String name,                                   @RequestParam(value = "description", required = false) String description,                                   @RequestParam(value = "oldCode", required = false) String oldCode,                                   @RequestParam(value = "materialType", required = false) String materialType,                                   @RequestParam(value = "inventoryType", required = false) String inventoryType,                                   @RequestParam(value = "status", required = false) String status,                                   @RequestParam(value = "materialClass", required = false) String materialClass,                                   @RequestParam(value = "materialControlType", required = false) String materialControlType,                                   @RequestParam(value = "model", required = false) String model,                                   @RequestParam(value = "manufacturePartNo", required = false) String manufacturePartNo,                                   @RequestParam(value = "pageSize", required = false) Integer pageSize,                                   @RequestParam(value = "offset", required = false) Integer offset,                                   @RequestParam(value = "sortBy", required = false) String sortBy) {        MaterialSearchRequest materialSearchRequest = MaterialSearchRequest.builder()                .tenantId(tenantId)                .ids(ids)                .code(code)                .name(name)                .description(description)                .oldCode(oldCode)                .materialType(materialType)                .inventoryType(inventoryType)                .status(status)                .materialClass(materialClass)                .materialControlType(materialControlType)                .model(model)                .manufacturePartNo(manufacturePartNo)                .pageSize(pageSize)                .offSet(offset)                .sortBy(sortBy)                .build();        Pagination<Material> materialList = materialService                .search(materialSearchRequest);        return buildMaterialResponse(materialList.getPagedData(), requestInfo);    }    private MaterialResponse buildMaterialResponse(List<Material> materials, RequestInfo requestInfo) {        return MaterialResponse.builder()                .responseInfo(getResponseInfo(requestInfo))                .materials(materials)                .build();    }    private ResponseInfo getResponseInfo(RequestInfo requestInfo) {        return ResponseInfo.builder()                .apiId(requestInfo.getApiId())                .ver(requestInfo.getVer())                .resMsgId(requestInfo.getMsgId())                .resMsgId("placeholder")                .status("placeholder")                .build();    }}