{
	"variables": [],
	"info": {
		"name": "eGov_Water",
		"_postman_id": "9b5ae096-0a72-8286-bd3d-5b72fcce9d97",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Commons",
			"description": "",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
									"    pm.environment.set(\"username\", \"narasappa\");",
									"    pm.environment.set(\"password\", \"demo\");",
									"}",
									"",
									"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
									"    pm.environment.set(\"username\", \"narasappa\");",
									"    pm.environment.set(\"password\", \"demo\");",
									"}",
									"",
									"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
									"    pm.environment.set(\"username\", \"94836\");",
									"    pm.environment.set(\"password\", \"12345678\");",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/user/oauth/token",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0",
								"description": ""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "read",
									"type": "text"
								},
								{
									"key": "tenantId",
									"value": "{{tenantId}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/user/_logout?access_token={{access_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"_logout"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{access_token}}",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\"RequestInfo\":{\"apiId\":\"org.egov.pgr\",\"ver\":\"1.0\",\"ts\":\"13-04-2017 12:13:30\",\"action\":\"POST\",\"did\":\"4354648646\",\"key\":\"xyz\",\"msgId\":\"654654\",\"requesterId\":\"61\",\"authToken\": \"{{access_token}}\"\n }}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Functional Tests",
			"description": "",
			"item": [
				{
					"name": "Legacy Transactions",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"tests[\"Username matches\"] = jsonData.UserRequest.userName.has(request.data[\"username\"]);",
											"",
											"postman.setNextRequest(\"Get Connection Types\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"url": "{{url}}/user/oauth/token",
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0",
										"description": ""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Connection Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.responseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.DataModelList.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"connectionType\", jsonData.DataModelList[rand].object);",
											"",
											"postman.setNextRequest(\"Get Source Types\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_getconnectiontypes?tenantId={{tenantId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_getconnectiontypes"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Source Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.SourceTypes.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"sourceType\", jsonData.SourceTypes[rand].name);",
											"",
											"postman.setNextRequest(\"Get Storage Reservoirs\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms/masters/sourcetypes/_search?tenantId={{tenantId}}&pageSize=500",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms",
										"masters",
										"sourcetypes",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pageSize",
											"value": "500",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Storage Reservoirs",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.StorageReservoirs.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"storageReservoirs\", jsonData.StorageReservoirs[rand].name);",
											"",
											"postman.setNextRequest(\"Get Usage Types\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms/masters/storagereservoirs/_search?tenantId={{tenantId}}&pageSize=500",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms",
										"masters",
										"storagereservoirs",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pageSize",
											"value": "500",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Usage Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.UsageTypes.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"usageType\", jsonData.UsageTypes[rand].code);",
											"",
											"postman.setNextRequest(\"Get Sub Usage Types\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms/masters/usagetypes/_search?tenantId={{tenantId}}&pageSize=500",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms",
										"masters",
										"usagetypes",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pageSize",
											"value": "500",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Sub Usage Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.UsageTypes.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"subUsageType\", jsonData.UsageTypes[rand].code);",
											"",
											"postman.setNextRequest(\"Get Locality Details\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms/masters/usagetypes/_search?tenantId={{tenantId}}&parent={{usageType}}&isSubUsageType=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms",
										"masters",
										"usagetypes",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "parent",
											"value": "{{usageType}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "isSubUsageType",
											"value": "true",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Locality Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.Boundary.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"localityId\", jsonData.Boundary[rand].id);",
											"",
											"postman.setNextRequest(\"Get Admin Ward Details\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/egov-location/boundarys/boundariesByBndryTypeNameAndHierarchyTypeName?tenantId={{tenantId}}&boundaryTypeName=LOCALITY&hierarchyTypeName=LOCATION",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys",
										"boundariesByBndryTypeNameAndHierarchyTypeName"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "boundaryTypeName",
											"value": "LOCALITY",
											"equals": true,
											"description": ""
										},
										{
											"key": "hierarchyTypeName",
											"value": "LOCATION",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Admin Ward Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.Boundary.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"adminWardId\", jsonData.Boundary[rand].id);",
											"",
											"postman.setNextRequest(\"Get Revenue Zone Details\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/egov-location/boundarys/boundariesByBndryTypeNameAndHierarchyTypeName?tenantId={{tenantId}}&boundaryTypeName=WARD&hierarchyTypeName=ADMINISTRATION",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys",
										"boundariesByBndryTypeNameAndHierarchyTypeName"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "boundaryTypeName",
											"value": "WARD",
											"equals": true,
											"description": ""
										},
										{
											"key": "hierarchyTypeName",
											"value": "ADMINISTRATION",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Revenue Zone Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.Boundary.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"revenueZoneId\", jsonData.Boundary[rand].id);",
											"",
											"postman.setNextRequest(\"Get Hsc PipeSizes\");"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/egov-location/boundarys/boundariesByBndryTypeNameAndHierarchyTypeName?tenantId={{tenantId}}&boundaryTypeName=ZONE&hierarchyTypeName=REVENUE",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys",
										"boundariesByBndryTypeNameAndHierarchyTypeName"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "boundaryTypeName",
											"value": "ZONE",
											"equals": true,
											"description": ""
										},
										{
											"key": "hierarchyTypeName",
											"value": "REVENUE",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Hsc PipeSizes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"var rand = 0;",
											"",
											"var max = jsonData.PipeSizes.length - 1;",
											"",
											"if(max > 0){",
											"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"}",
											"",
											"pm.environment.set(\"hscPipeSize\", jsonData.PipeSizes[rand].sizeInMilimeter);",
											"",
											"if(environment.isMetered.has(\"true\")){",
											" if(environment.withProperty.has(\"true\")){postman.setNextRequest(\"Get Property Details\");}",
											" else{postman.setNextRequest(\"Create Legacy Water Connection for Metered\");}",
											"}",
											"else{",
											" if(environment.withProperty.has(\"true\")){postman.setNextRequest(\"Get Property Details\");}",
											" else{postman.setNextRequest(\"Create Legacy Water Connection for Non-Metered\");}",
											"}"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms/masters/pipesizes/_search?tenantId={{tenantId}}&pageSize=500",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms",
										"masters",
										"pipesizes",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pageSize",
											"value": "500",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Property Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"status is success\"] = jsonData.responseInfo.status.has(\"SUCCESSFUL\");",
											"",
											"for(var i=0;i<jsonData.properties.length;i++){",
											"    if(jsonData.properties[i].upicNumber){",
											"        pm.environment.set(\"upicNumber\", jsonData.properties[i].upicNumber);",
											"        pm.environment.set(\"name\", jsonData.properties[i].owners[0].name);",
											"        pm.environment.set(\"mobileNo\", jsonData.properties[i].owners[0].mobileNumber);",
											"        pm.environment.set(\"emailId\", jsonData.properties[i].owners[0].emailId);",
											"        pm.environment.set(\"aadharNumber\", jsonData.properties[i].owners[0].aadhaarNumber);",
											"        pm.environment.set(\"doorNo\", jsonData.properties[i].address.addressNumber);",
											"        pm.environment.set(\"propertyType\", jsonData.properties[i].propertyDetail.propertyType);",
											"        pm.environment.set(\"noOfFloors\", jsonData.properties[i].propertyDetail.noOfFloors);",
											"        pm.environment.set(\"localityId\", jsonData.properties[i].boundary.locationBoundary.id);",
											"        pm.environment.set(\"revenueZoneId\", jsonData.properties[i].boundary.revenueBoundary.id);",
											"        pm.environment.set(\"adminWardId\", jsonData.properties[i].boundary.adminBoundary.id);",
											"    }",
											"}",
											"",
											"if(environment.isMetered.has(\"true\")){",
											"    postman.setNextRequest(\"Create Legacy Water Connection with Property for Metered\");",
											"}",
											"else{",
											"postman.setNextRequest(\"Create Legacy Water Connection With Property for Non-Metered\");",
											"}"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/pt-property/properties/_search?tenantId={{tenantId}}&pagesize=500&channel=DATA_ENTRY",
									"host": [
										"{{url}}"
									],
									"path": [
										"pt-property",
										"properties",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pagesize",
											"value": "500",
											"equals": true,
											"description": ""
										},
										{
											"key": "channel",
											"value": "DATA_ENTRY",
											"equals": true,
											"description": ""
										},
										{
											"key": "mobileNumber",
											"value": "{{mobileNo}}",
											"equals": true,
											"description": "",
											"disabled": true
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\": {\n    \"apiId\": \"emp\",\n    \"ver\": \"1.0\",\n    \"ts\": \"10032017\",\n    \"action\": \"create\",\n    \"did\": \"1\",\n    \"key\": \"abcdkey\",\n    \"msgId\": \"20170310130900\",\n    \"requesterId\": \"rajesh\",\n    \"authToken\": \"{{access_token}}\"\n  }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create Legacy Water Connection for Non-Metered",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is Success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"tests[\"emailId matches\"] = jsonData.Connection[0].connectionOwner.emailId.has(environment.emailId);",
											"tests[\"name matches\"] = jsonData.Connection[0].connectionOwner.name.has(environment.name);",
											"tests[\"mobileNo matches\"] = jsonData.Connection[0].connectionOwner.mobileNumber.has(environment.mobileNo);",
											"tests[\"aadharNumber matches\"] = jsonData.Connection[0].connectionOwner.aadhaarNumber.has(environment.aadharNumber);",
											"",
											"tests[\"billingType matches\"] = jsonData.Connection[0].billingType.has(\"NONMETERED\");",
											"tests[\"sourceType matches\"] = jsonData.Connection[0].sourceType.has(environment.sourceType);",
											"tests[\"StorageReservior matches\"] = jsonData.Connection[0].storageReservoir.has(environment.storageReservoirs);",
											"tests[\"ConnectionType matches\"] = jsonData.Connection[0].connectionType.has(environment.connectionType);",
											"tests[\"usageType matches\"] = jsonData.Connection[0].usageType.has(environment.usageType);",
											"tests[\"pipeSize matches\"] = jsonData.Connection[0].hscPipeSizeType.has(environment.hscPipeSize);",
											"tests[\"subUsageType matches\"] = jsonData.Connection[0].subUsageType.has(environment.subUsageType);",
											"tests[\"oldConsumer matches\"] = jsonData.Connection[0].legacyConsumerNumber.has(environment.oldConsumerNumber);",
											"",
											"tests[\"Revenue boundary matches\"] = (jsonData.Connection[0].connectionLocation.revenueBoundary.id.toString()).has(environment.revenueZoneId);",
											"tests[\"Location boundary matches\"] = (jsonData.Connection[0].connectionLocation.locationBoundary.id.toString()).has(environment.localityId);",
											"tests[\"Administration boundary matches\"] = (jsonData.Connection[0].connectionLocation.adminBoundary.id.toString()).has(environment.adminWardId);",
											"tests[\"isLegacy\"] = jsonData.Connection[0].isLegacy;",
											"",
											"pm.environment.set(\"consumerNumber\", jsonData.Connection[0].consumerNumber);",
											"",
											"pm.environment.set(\"status\", \"consumerNumber\");",
											"",
											"postman.setNextRequest(\"Get Water Connection Details\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var a = Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000;",
											"",
											"pm.environment.set(\"name\", \"Test_\"+a);",
											"",
											"pm.environment.set(\"emailId\", \"Test_\"+a+\"@testing.com\");",
											"",
											"pm.environment.set(\"oldConsumerNumber\", a);",
											"",
											"pm.environment.set(\"mobileNo\", \"1987\"+a);",
											"",
											"pm.environment.set(\"aadharNumber\", \"123456\"+a);"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_create?tenantId={{tenantId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_create"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"Connection\":{  \n      \"applicationType\":\"NEWCONNECTION\",\n      \"withProperty\":false,\n      \"connectionOwner\":{  \n         \"emailId\":\"{{emailId}}\",\n         \"isPrimaryOwner\":true,\n         \"name\":\"{{name}}\",\n         \"mobileNumber\":\"{{mobileNo}}\",\n         \"aadhaarNumber\":\"{{aadharNumber}}\"\n      },\n      \"property\":{  \n         \"email\":\"\"\n      },\n      \"supplyType\":\"Semi Bulk Type\",\n      \"outsideULB\":false,\n      \"documents\":[  \n         {  \n            \"fileStoreId\":\"\",\n            \"displayName\":\"Aadhaar Card\",\n            \"name\":\"\",\n            \"document\":15\n         }\n      ],\n      \"address\":{  \n         \"addressLine1\":\"Banglore\",\n         \"city\":\"Banglore\",\n         \"pinCode\":\"123456\"\n      },\n      \"connectionLocation\":{  \n         \"revenueBoundary\":{  \n            \"id\":\"{{revenueZoneId}}\"\n         },\n         \"adminBoundary\":{  \n            \"id\":\"{{adminWardId}}\"\n         },\n         \"locationBoundary\":{  \n            \"id\":\"{{localityId}}\"\n         },\n         \"billingAddress\":\"Banglore\"\n      },\n      \"executionDate\":1504981800000,\n      \"legacyConsumerNumber\":\"{{oldConsumerNumber}}\",\n      \"usageType\":\"{{usageType}}\",\n      \"subUsageType\":\"{{subUsageType}}\",\n      \"hscPipeSizeType\":{{hscPipeSize}},\n      \"billingType\":\"NONMETERED\",\n      \"fromDate\":\"\",\n      \"toDate\":\"\",\n      \"connectionType\":\"{{connectionType}}\",\n      \"sourceType\":\"{{sourceType}}\",\n      \"storageReservoir\":\"{{storageReservoirs}}\",\n      \"sumpCapacity\":\"1000\",\n      \"billSequenceNumber\":\"190\",\n      \"numberOfPersons\":\"10\",\n      \"numberOfFamily\":3,\n      \"tenantId\":\"{{tenantId}}\"\n   },\n   \"RequestInfo\":{  \n      \"apiId\":\"org.egov.pt\",\n      \"ver\":\"1.0\",\n      \"ts\":1506495434160,\n      \"action\":\"asd\",\n      \"did\":\"4354648646\",\n      \"key\":\"xyz\",\n      \"msgId\":\"654654\",\n      \"requesterId\":\"61\",\n      \"authToken\":\"{{access_token}}\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create Legacy Water Connection With Property for Non-Metered",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is Success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"tests[\"emailId matches\"] = jsonData.Connection[0].property.email.has(environment.emailId);",
											"tests[\"name matches\"] = jsonData.Connection[0].property.nameOfApplicant.has(environment.name);",
											"tests[\"mobileNo matches\"] = jsonData.Connection[0].property.mobileNumber.has(environment.mobileNo);",
											"// tests[\"aadharNumber matches\"] = jsonData.Connection[0].property.adharNumber.has(environment.aadharNumber);",
											"tests[\"upicNumber matches\"] = jsonData.Connection[0].property.propertyidentifier.has(environment.upicNumber);",
											"",
											"tests[\"billingType matches\"] = jsonData.Connection[0].billingType.has(\"NONMETERED\");",
											"tests[\"sourceType matches\"] = jsonData.Connection[0].sourceType.has(environment.sourceType);",
											"tests[\"StorageReservior matches\"] = jsonData.Connection[0].storageReservoir.has(environment.storageReservoirs);",
											"tests[\"ConnectionType matches\"] = jsonData.Connection[0].connectionType.has(environment.connectionType);",
											"tests[\"usageType matches\"] = jsonData.Connection[0].usageType.has(environment.usageType);",
											"tests[\"pipeSize matches\"] = jsonData.Connection[0].hscPipeSizeType.has(environment.hscPipeSize);",
											"tests[\"subUsageType matches\"] = jsonData.Connection[0].subUsageType.has(environment.subUsageType);",
											"tests[\"oldConsumer matches\"] = jsonData.Connection[0].legacyConsumerNumber.has(environment.oldConsumerNumber);",
											"",
											"tests[\"Revenue boundary matches\"] = (jsonData.Connection[0].property.zone.toString()).has(environment.revenueZoneId);",
											"tests[\"Location boundary matches\"] = (jsonData.Connection[0].property.locality.toString()).has(environment.localityId);",
											"tests[\"Administration boundary matches\"] = (jsonData.Connection[0].property.ward.toString()).has(environment.adminWardId);",
											"tests[\"isLegacy\"] = jsonData.Connection[0].isLegacy;",
											"",
											"pm.environment.set(\"consumerNumber\", jsonData.Connection[0].consumerNumber);",
											"",
											"pm.environment.set(\"status\", \"consumerNumber\");",
											"",
											"postman.setNextRequest(\"Get Water Connection Details\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var a = Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000;",
											"",
											"pm.environment.set(\"oldConsumerNumber\", a);"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_create?tenantId={{tenantId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_create"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"Connection\":{  \n      \"applicationType\":\"NEWCONNECTION\",\n      \"withProperty\":true,\n      \"connectionOwner\":{  \n         \"emailId\":\"\",\n         \"isPrimaryOwner\":true\n      },\n      \"property\":{  \n         \"email\":\"{{emailId}}\",\n         \"propertyIdentifier\":\"{{upicNumber}}\",\n         \"mobileNumber\":\"{{mobileNo}}\",\n         \"nameOfApplicant\":\"{{name}}\",\n         \"aadhaarNumber\":\"{{aadharNumber}}\",\n         \"noOfFloors\":{{noOfFloors}},\n         \"locality\":{{localityId}},\n         \"zone\":{{revenueZoneId}},\n         \"ward\":{{adminWardId}},\n         \"address\":\"{{doorNo}}\",\n         \"property\":\"{{propertyType}}\"\n      },\n      \"supplyType\":\"Semi Bulk Type\",\n      \"outsideULB\":false,\n      \"documents\":[  \n         {  \n            \"fileStoreId\":\"\",\n            \"displayName\":\"Aadhaar Card\",\n            \"name\":\"\",\n            \"document\":15\n         }\n      ],\n      \"legacyConsumerNumber\":\"{{oldConsumerNumber}}\",\n      \"executionDate\":1504981800000,\n      \"usageType\":\"{{usageType}}\",\n      \"subUsageType\":\"{{subUsageType}}\",\n      \"hscPipeSizeType\":{{hscPipeSize}},\n      \"billingType\":\"NONMETERED\",\n      \"connectionType\":\"{{connectionType}}\",\n      \"sourceType\":\"{{sourceType}}\",\n      \"storageReservoir\":\"{{storageReservoirs}}\",\n      \"sumpCapacity\":\"100\",\n      \"billSequenceNumber\":\"123\",\n      \"connectionLocation\":{  \n         \"billingAddress\":\"Banglore\"\n      },\n      \"numberOfPersons\":\"5\",\n      \"numberOfFamily\":2,\n      \"tenantId\":\"{{tenantId}}\"\n   },\n   \"RequestInfo\":{  \n      \"apiId\":\"org.egov.pt\",\n      \"ver\":\"1.0\",\n      \"ts\":1506589291568,\n      \"action\":\"asd\",\n      \"did\":\"4354648646\",\n      \"key\":\"xyz\",\n      \"msgId\":\"654654\",\n      \"requesterId\":\"61\",\n      \"authToken\":\"{{access_token}}\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create Legacy Water Connection for Metered",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is Success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"tests[\"emailId matches\"] = jsonData.Connection[0].connectionOwner.emailId.has(environment.emailId);",
											"tests[\"name matches\"] = jsonData.Connection[0].connectionOwner.name.has(environment.name);",
											"tests[\"mobileNo matches\"] = jsonData.Connection[0].connectionOwner.mobileNumber.has(environment.mobileNo);",
											"tests[\"aadharNumber matches\"] = jsonData.Connection[0].connectionOwner.aadhaarNumber.has(environment.aadharNumber);",
											"",
											"tests[\"billingType matches\"] = jsonData.Connection[0].billingType.has(\"METERED\");",
											"tests[\"sourceType matches\"] = jsonData.Connection[0].sourceType.has(environment.sourceType);",
											"tests[\"StorageReservior matches\"] = jsonData.Connection[0].storageReservoir.has(environment.storageReservoirs);",
											"tests[\"ConnectionType matches\"] = jsonData.Connection[0].connectionType.has(environment.connectionType);",
											"tests[\"usageType matches\"] = jsonData.Connection[0].usageType.has(environment.usageType);",
											"tests[\"pipeSize matches\"] = jsonData.Connection[0].hscPipeSizeType.has(environment.hscPipeSize);",
											"tests[\"subUsageType matches\"] = jsonData.Connection[0].subUsageType.has(environment.subUsageType);",
											"tests[\"oldConsumer matches\"] = jsonData.Connection[0].legacyConsumerNumber.has(environment.oldConsumerNumber);",
											"",
											"tests[\"Revenue boundary matches\"] = (jsonData.Connection[0].connectionLocation.revenueBoundary.id.toString()).has(environment.revenueZoneId);",
											"tests[\"Location boundary matches\"] = (jsonData.Connection[0].connectionLocation.locationBoundary.id.toString()).has(environment.localityId);",
											"tests[\"Administration boundary matches\"] = (jsonData.Connection[0].connectionLocation.adminBoundary.id.toString()).has(environment.adminWardId);",
											"tests[\"isLegacy\"] = jsonData.Connection[0].isLegacy;",
											"tests[\"not with property\"] = jsonData.Connection[0].withProperty === false;",
											"",
											"pm.environment.set(\"consumerNumber\", jsonData.Connection[0].consumerNumber);",
											"",
											"pm.environment.set(\"status\", \"consumerNumber\");",
											"",
											"postman.setNextRequest(\"Get Water Connection Details\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var a = Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000;",
											"",
											"pm.environment.set(\"name\", \"Test_\"+a);",
											"",
											"pm.environment.set(\"emailId\", \"Test_\"+a+\"@testing.com\");",
											"",
											"pm.environment.set(\"oldConsumerNumber\", a);",
											"",
											"pm.environment.set(\"mobileNo\", \"1987\"+a);",
											"",
											"pm.environment.set(\"aadharNumber\", \"123456\"+a);"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_create?tenantId={{tenantId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_create"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"Connection\":{  \n      \"applicationType\":\"NEWCONNECTION\",\n      \"withProperty\":false,\n      \"connectionOwner\":{  \n         \"emailId\":\"{{emailId}}\",\n         \"isPrimaryOwner\":true,\n         \"name\":\"{{name}}\",\n         \"mobileNumber\":\"{{mobileNo}}\",\n         \"aadhaarNumber\":\"{{aadharNumber}}\",\n         \"gender\":\"MALE\"\n      },\n      \"property\":{  \n         \"email\":\"\"\n      },\n      \"supplyType\":\"Semi Bulk Type\",\n      \"outsideULB\":false,\n      \"documents\":[  \n         {  \n            \"fileStoreId\":\"\",\n            \"displayName\":\"Aadhaar Card\",\n            \"name\":\"\",\n            \"document\":15\n         }\n      ],\n      \"houseNumber\":\"{{doorNo}}\",\n      \"address\":{  \n         \"addressLine1\":\"Banglore\",\n         \"city\":\"Banglore\",\n         \"pinCode\":\"123456\"\n      },\n      \"connectionLocation\":{  \n         \"revenueBoundary\":{  \n            \"id\":\"{{revenueZoneId}}\"\n         },\n         \"adminBoundary\":{  \n            \"id\":\"{{adminWardId}}\"\n         },\n         \"locationBoundary\":{  \n            \"id\":\"{{localityId}}\"\n         },\n         \"billingAddress\":\"Banglore\"\n      },\n      \"executionDate\":1504981800000,\n      \"legacyConsumerNumber\":\"{{oldConsumerNumber}}\",\n      \"usageType\":\"{{usageType}}\",\n      \"subUsageType\":\"{{subUsageType}}\",\n      \"hscPipeSizeType\":{{hscPipeSize}},\n      \"meter\":[  \n         {  \n            \"meterOwner\":\"Citizen\",\n            \"meterModel\":\"General\",\n            \"meterMake\":\"\",\n            \"meterSlNo\":\"{{oldConsumerNumber}}\",\n            \"meterCost\":\"\",\n            \"initialMeterReading\":\"\",\n            \"maximumMeterReading\":\"100\",\n            \"meterReadings\":[  \n               {  \n                  \"reading\":\"50\",\n                  \"consumption\":\"\",\n                  \"readingDate\":1504981800000\n               }\n            ]\n         }\n      ],\n      \"billingType\":\"METERED\",\n      \"connectionType\":\"{{connectionType}}\",\n      \"sourceType\":\"{{sourceType}}\",\n      \"storageReservoir\":\"{{storageReservoirs}}\",\n      \"sumpCapacity\":\"1000\",\n      \"billSequenceNumber\":\"123\",\n      \"numberOfPersons\":\"5\",\n      \"numberOfFamily\":2,\n      \"tenantId\":\"{{tenantId}}\"\n   },\n   \"RequestInfo\":{  \n      \"apiId\":\"org.egov.pt\",\n      \"ver\":\"1.0\",\n      \"ts\":1507024394684,\n      \"action\":\"asd\",\n      \"did\":\"4354648646\",\n      \"key\":\"xyz\",\n      \"msgId\":\"654654\",\n      \"requesterId\":\"61\",\n      \"authToken\":\"{{access_token}}\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create Legacy Water Connection with Property for Metered",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is Success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"tests[\"name matches\"] = jsonData.Connection[0].property.nameOfApplicant.has(environment.name);",
											"tests[\"upicNumber matches\"] = jsonData.Connection[0].property.propertyidentifier.has(environment.upicNumber);",
											"",
											"tests[\"billingType matches\"] = jsonData.Connection[0].billingType.has(\"METERED\");",
											"tests[\"sourceType matches\"] = jsonData.Connection[0].sourceType.has(environment.sourceType);",
											"tests[\"StorageReservior matches\"] = jsonData.Connection[0].storageReservoir.has(environment.storageReservoirs);",
											"tests[\"ConnectionType matches\"] = jsonData.Connection[0].connectionType.has(environment.connectionType);",
											"tests[\"usageType matches\"] = jsonData.Connection[0].usageType.has(environment.usageType);",
											"tests[\"pipeSize matches\"] = jsonData.Connection[0].hscPipeSizeType.has(environment.hscPipeSize);",
											"tests[\"subUsageType matches\"] = jsonData.Connection[0].subUsageType.has(environment.subUsageType);",
											"tests[\"oldConsumer matches\"] = jsonData.Connection[0].legacyConsumerNumber.has(environment.oldConsumerNumber);",
											"",
											"tests[\"isLegacy\"] = jsonData.Connection[0].isLegacy;",
											"",
											"pm.environment.set(\"consumerNumber\", jsonData.Connection[0].consumerNumber);",
											"",
											"pm.environment.set(\"status\", \"consumerNumber\");",
											"",
											"postman.setNextRequest(\"Get Water Connection Details\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var a = Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000;",
											"",
											"pm.environment.set(\"oldConsumerNumber\", a);"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_create?tenantId={{tenantId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_create"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"Connection\":{  \n      \"applicationType\":\"NEWCONNECTION\",\n      \"withProperty\":true,\n      \"connectionOwner\":{  \n         \"emailId\":\"\",\n         \"isPrimaryOwner\":true\n      },\n      \"property\":{  \n         \"email\":null,\n         \"propertyIdentifier\":\"{{upicNumber}}\",\n         \"mobileNumber\":null,\n         \"nameOfApplicant\":\"{{name}}\",\n         \"aadhaarNumber\":null,\n         \"noOfFloors\":{{noOfFloors}},\n         \"locality\":0,\n         \"zone\":{{revenueZoneId}},\n         \"ward\":0,\n         \"address\":\"{{doorNo}}\",\n         \"property\":\"{{propertyType}}\"\n      },\n      \"supplyType\":\"Semi Bulk Type\",\n      \"outsideULB\":false,\n      \"documents\":[  \n         {  \n            \"fileStoreId\":\"\",\n            \"displayName\":\"Aadhaar Card\",\n            \"name\":\"\",\n            \"document\":15\n         }\n      ],\n      \"usageType\":\"{{usageType}}\",\n      \"subUsageType\":\"{{subUsageType}}\",\n      \"hscPipeSizeType\":{{hscPipeSize}},\n      \"meter\":[  \n         {  \n            \"meterOwner\":\"Citizen\",\n            \"meterModel\":\"General\",\n            \"meterMake\":\"\",\n            \"meterSlNo\":\"189\",\n            \"meterCost\":\"\",\n            \"initialMeterReading\":\"\",\n            \"maximumMeterReading\":\"50\",\n            \"meterReadings\":[  \n               {  \n                  \"reading\":\"45\",\n                  \"consumption\":\"\",\n                  \"readingDate\":1504981800000\n               }\n            ]\n         }\n      ],\n      \"billingType\":\"METERED\",\n      \"legacyConsumerNumber\":\"{{oldConsumerNumber}}\",\n      \"connectionType\":\"{{connectionType}}\",\n      \"sourceType\":\"{{sourceType}}\",\n      \"executionDate\": 1252434600000,\n      \"storageReservoir\":\"{{storageReservoirs}}\",\n      \"sumpCapacity\":\"1000\",\n      \"billSequenceNumber\":\"123\",\n      \"connectionLocation\":{  \n         \"billingAddress\":\"Banglore\"\n      },\n      \"numberOfPersons\":\"4\",\n      \"numberOfFamily\":1,\n      \"tenantId\":\"{{tenantId}}\"\n   },\n   \"RequestInfo\":{  \n      \"apiId\":\"org.egov.pt\",\n      \"ver\":\"1.0\",\n      \"ts\":1507099554323,\n      \"action\":\"asd\",\n      \"did\":\"4354648646\",\n      \"key\":\"xyz\",\n      \"msgId\":\"654654\",\n      \"requesterId\":\"61\",\n      \"authToken\":\"{{access_token}}\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Water Connection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[\"Status is Success\"] = jsonData.ResponseInfo.status.has(\"200\");",
											"",
											"for(var i=0;i<jsonData.Connection.length;i++){",
											"    if(jsonData.Connection[i].consumerNumber.has(environment.consumerNumber)){",
											"tests[\"sourceType matches\"] = jsonData.Connection[i].sourceType.has(environment.sourceType);",
											"tests[\"StorageReservior matches\"] = jsonData.Connection[i].storageReservoir.has(environment.storageReservoirs);",
											"tests[\"ConnectionType matches\"] = jsonData.Connection[i].connectionType.has(environment.connectionType);",
											"tests[\"usageType matches\"] = jsonData.Connection[i].usageType.has(environment.usageType);",
											"tests[\"pipeSize matches\"] = jsonData.Connection[i].hscPipeSizeType.has(environment.hscPipeSize);",
											"tests[\"subUsageType matches\"] = jsonData.Connection[i].subUsageType.has(environment.subUsageType);",
											"tests[\"oldConsumer matches\"] = jsonData.Connection[i].legacyConsumerNumber.has(environment.oldConsumerNumber);",
											"tests[\"isLegacy\"] = jsonData.Connection[i].isLegacy;",
											"tests[\"ConsumerNumber matches\"] = jsonData.Connection[i].consumerNumber.has(environment.consumerNumber);",
											"",
											"      if(environment.withProperty.has(\"true\")){",
											"             tests[\"emailId matches\"] = jsonData.Connection[i].property.email.has(environment.emailId);",
											"             tests[\"name matches\"] = jsonData.Connection[i].property.nameOfApplicant.has(environment.name);",
											"             tests[\"mobileNo matches\"] = jsonData.Connection[i].property.mobileNumber.has(environment.mobileNo);",
											"             tests[\"aadharNumber matches\"] = jsonData.Connection[i].property.adharNumber.has(environment.aadharNumber);",
											"        }",
											"      else{",
											"             tests[\"emailId matches\"] = jsonData.Connection[i].connectionOwner.emailId.has(environment.emailId);",
											"             tests[\"name matches\"] = jsonData.Connection[i].connectionOwner.name.has(environment.name);",
											"             tests[\"mobileNo matches\"] = jsonData.Connection[i].connectionOwner.mobileNumber.has(environment.mobileNo);",
											"             tests[\"aadharNumber matches\"] = jsonData.Connection[i].connectionOwner.aadhaarNumber.has(environment.aadharNumber);",
											"             tests[\"Revenue boundary matches\"] = (jsonData.Connection[i].connectionLocation.revenueBoundary.id.toString()).has(environment.revenueZoneId);",
											"             tests[\"Location boundary matches\"] = (jsonData.Connection[i].connectionLocation.locationBoundary.id.toString()).has(environment.localityId);",
											"             tests[\"Administration boundary matches\"] = (jsonData.Connection[i].connectionLocation.adminBoundary.id.toString()).has(environment.adminWardId);",
											"  }",
											" }",
											"}",
											"switch(environment.status){",
											"    ",
											"    case \"consumerNumber\" :",
											"        pm.environment.set(\"status\",\"mobileNumber\");",
											"        postman.setNextRequest(\"Get Water Connection Details\");",
											"        break;",
											"        ",
											"    case \"mobileNumber\" :",
											"        pm.environment.set(\"status\",\"aadharNumber\");",
											"        postman.setNextRequest(\"Get Water Connection Details\");",
											"        break;",
											"        ",
											"    case \"aadharNumber\" :",
											"        pm.environment.set(\"status\",\"ownerName\");",
											"        postman.setNextRequest(\"Get Water Connection Details\");",
											"        break;    ",
											"    ",
											"    case \"ownerName\" :",
											"        pm.environment.set(\"status\",\"oldConsumerNumber\");",
											"        postman.setNextRequest(\"Get Water Connection Details\");",
											"        break;    ",
											"        ",
											"    case \"oldConsumerNumber\" :",
											"        pm.environment.set(\"status\",\"done\");",
											"        postman.setNextRequest(\"Logout\");",
											"        break;        ",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.status.has(\"consumerNumber\")){",
											"    pm.environment.set(\"searchParameter\", \"consumerNumber\");",
											"    pm.environment.set(\"searchValue\", environment.consumerNumber);",
											"}",
											"",
											"if(environment.status.has(\"mobileNumber\")){",
											"    pm.environment.set(\"searchParameter\", \"mobileNumber\");",
											"    pm.environment.set(\"searchValue\", environment.mobileNo);",
											"}",
											"",
											"if(environment.status.has(\"aadharNumber\")){",
											"    pm.environment.set(\"searchParameter\", \"aadhaarNumber\");",
											"    pm.environment.set(\"searchValue\", environment.aadharNumber);",
											"}",
											"",
											"if(environment.status.has(\"ownerName\")){",
											"    pm.environment.set(\"searchParameter\", \"name\");",
											"    pm.environment.set(\"searchValue\", environment.name);",
											"}",
											"",
											"if(environment.status.has(\"oldConsumerNumber\")){",
											"    pm.environment.set(\"searchParameter\", \"legacyConsumerNumber\");",
											"    pm.environment.set(\"searchValue\", environment.oldConsumerNumber);",
											"}"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/wcms-connection/connection/_search?tenantId={{tenantId}}&{{searchParameter}}={{searchValue}}&pageSize=500",
									"host": [
										"{{url}}"
									],
									"path": [
										"wcms-connection",
										"connection",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "{{searchParameter}}",
											"value": "{{searchValue}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "pageSize",
											"value": "500",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{url}}/user/_logout?access_token={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"_logout"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{access_token}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\"RequestInfo\":{\"apiId\":\"org.egov.pgr\",\"ver\":\"1.0\",\"ts\":\"13-04-2017 12:13:30\",\"action\":\"POST\",\"did\":\"4354648646\",\"key\":\"xyz\",\"msgId\":\"654654\",\"requesterId\":\"61\",\"authToken\": \"{{access_token}}\"\n }}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Get Billing Service Objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Status is success\"] = jsonData.responseInfo.status.has(\"200\");",
							"",
							"var rand = 0;",
							"",
							"var max = jsonData.DataModelList.length - 1;",
							"",
							"if(max > 0){",
							"    rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
							"}",
							"",
							"pm.environment.set(\"billingType\", jsonData.DataModelList[rand].object);"
						]
					}
				}
			],
			"request": {
				"url": {
					"raw": "{{url}}/wcms-connection/connection/_getbillingtypes?tenantId={{tenantId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"wcms-connection",
						"connection",
						"_getbillingtypes"
					],
					"query": [
						{
							"key": "tenantId",
							"value": "{{tenantId}}",
							"equals": true,
							"description": ""
						}
					],
					"variable": []
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"RequestInfo\":{\n      \"authToken\":\"{{access_token}}\",\n      \"ts\":\"12345678\",\n      \"ver\":\"1.0\",\n      \"requesterId\":\"rajesh\",\n      \"action\":\"create\",\n      \"msgId\":\"20170310130900\",\n      \"apiId\":\"emp\",\n      \"did\":\"1\",\n      \"key\":\"abcdkey\"\n   }\n}"
				},
				"description": ""
			},
			"response": []
		}
	]
}