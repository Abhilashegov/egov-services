{
	"info": {
		"name": "eGov_SWM",
		"_postman_id": "7b8fa028-3835-d8f9-0fed-1637210f3075",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Masters",
			"description": "",
			"item": [
				{
					"name": "Stop Entry(Collection Point) Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"  ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Collection point Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65bc67c7-18a1-4119-adf8-d9bb43bffbe1",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 100000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 100000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 100000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 100000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "446ad338-72a0-4585-b5ac-d4e8cc5d3c36",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Collection Point Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection Point Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var CollectionPoint1 = jsonBody.collectionPoints[0].name;",
													"",
													"pm.environment.set(\"CollectionPoint1\",CollectionPoint1);",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(CollectionPoint1).to.include(pm.environment.get(\"CollectionPoint1\"));",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Collection point Update\");    "
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_search?tenantId={{tenantId}}&code={{collectionPoints1code}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{collectionPoints1code}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var description = jsonData.collectionPoints[0].collectionPointDetails[0].description;",
													"pm.environment.set(\"description\",description);",
													"",
													"",
													"postman.setNextRequest(\"Updated Collection Point Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n   \"collectionPoints\":[\n      {\n      \t    \"code\": \"{{collectionPoints1code}}\",\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"descriptions added\"\n\t    \t\t}\n\t\t\t]\n      }\n]\n}\n            "
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Updated Collection Point Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var updatedDescription = jsonBody.collectionPoints[0].collectionPointDetails[0].description;",
													"pm.environment.set(\"updatedDescription\",updatedDescription);",
													"",
													"pm.test(\"garbageEstimate updated successfully\", function () {",
													"    pm.expect(updatedDescription).to.include(pm.environment.get(\"description\"));",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_search?tenantId={{tenantId}}&code={{collectionPoints1code}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{collectionPoints1code}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Collection point Create with duplicate bin id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Errors.length > 0){",
													"             ErrorMsg = jsonData.Errors[0].message;",
													"             pm.test(\"Collection point creation with duplicate Bin IDs has failed and test case successfull\", function () {",
													"    pm.expect(ErrorMsg).to.include(\"Duplicate BinIds in given Bin details\");",
													"});",
													"         ",
													"         tests[\"Collection point creation with duplicate Bin IDs has failed and test case successfull\"] = true;",
													"}",
													"             ",
													"             ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create with duplicate collection point name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Errors.length > 0){",
													"         var max = jsonData.Errors.length - 1;",
													"         var rand = 0;",
													"         var ErrorMsg = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             ErrorMsg = jsonData.Errors[rand].message;",
													"             pm.test(\"Body Matching\", function () {",
													"    pm.expect(ErrorMsg).to.include(\"Already Collection point is exists\");",
													"});",
													"         }",
													"         tests[\"Already Collection point is exists and test case for duplicate collection point passed\"] = true;",
													"}",
													"             ",
													"             ",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create with duplicate RFID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Errors.length > 0){",
													"         var max = jsonData.Errors.length - 1;",
													"         var rand = 0;",
													"         var ErrorMsg = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             RFID = jsonData.Errors[rand].message;",
													"             pm.test(\"Body Matching\", function () {",
													"    pm.expect(pm.jsonData.Errors[rand].message).to.include(\"Duplicate RFIDs\");",
													"});",
													"         }",
													"         tests[\"Collection point creation with Duplicate RFIDs has failed and test case successfull\"] = true;",
													"}",
													"             ",
													"             ",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without name successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": null,\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without location",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without location successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Location Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":null\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without BinID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without BinID successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": null,\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without collection type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without collection type successful\", function () {",
													"    pm.expect(errMsg).to.include(\"CollectionType Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":null\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create without garbage estimate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without garbage estimate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :null,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Emp Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":{\n      \"action\": \"search\",\n      \"did\": \"\",\n      \"msgId\": null,\n      \"authToken\": \"{{access_token}}\",\n      \"apiId\": null,\n      \"ver\": null,\n      \"ts\": \"\",\n      \"key\": null\n   \n  }\n}"
										},
										"url": {
											"raw": "{{url}}/hr-employee/employees/_search?tenantId=default",
											"host": [
												"{{url}}"
											],
											"path": [
												"hr-employee",
												"employees",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												}
											]
										},
										"description": null
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Maintenance Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setNextRequest(\"Vehicle Maintenance Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var vehicleMaintenanceCode = jsonBody.vehicleMaintenances[0].code;",
													"pm.environment.set(\"vehicleMaintenanceCode\", vehicleMaintenanceCode);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var searchVehicleMaintenanceCode = jsonData.vehicleMaintenances[0].code;",
													"",
													"",
													"",
													"pm.test(\"Code matches string\", function () {",
													"    pm.expect(searchVehicleMaintenanceCode).to.include(pm.environment.get(\"vehicleMaintenanceCode\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_search?tenantId={{tenantId}}&code={{vehicleMaintenanceCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{vehicleMaintenanceCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var reqBody = JSON.parse(request.data);",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var reqdowntimeforMaintenanceUom = reqBody.vehicleMaintenances[0].downtimeforMaintenanceUom;",
													"pm.environment.set(\"reqdowntimeforMaintenanceUom\", reqdowntimeforMaintenanceUom);",
													"",
													"var resdowntimeforMaintenanceUom = jsonData.vehicleMaintenances[0].downtimeforMaintenanceUom;",
													"pm.environment.set(\"resdowntimeforMaintenanceUom\", resdowntimeforMaintenanceUom);",
													"",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(resdowntimeforMaintenanceUom).to.include(pm.environment.get(\"reqdowntimeforMaintenanceUom\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n      \t\t\"code\":\"{{vehicleMaintenanceCode}}\",\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":120,\n            \"downtimeforMaintenanceUom\":\"Days\",\n            \"downtimeforMaintenance\":1\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Updated Vehicle Maintenance Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var reqBody = JSON.parse(request.data);",
													"",
													"",
													"var searchVehicleMaintenanceCode = jsonData.vehicleMaintenances[0].code;",
													"",
													"",
													"pm.test(\"Code matches string\", function () {",
													"    pm.expect(searchVehicleMaintenanceCode).to.include(pm.environment.get(\"vehicleMaintenanceCode\"));",
													"});",
													"",
													"",
													"var resdowntimeforMaintenanceUom = jsonData.vehicleMaintenances[0].downtimeforMaintenanceUom;",
													"pm.environment.set(\"resdowntimeforMaintenanceUom\", resdowntimeforMaintenanceUom);",
													"",
													"",
													"pm.test(\"UOM of Downtime for Maintenance updated successfully\", function () {",
													"    pm.expect(resdowntimeforMaintenanceUom).to.include(pm.environment.get(\"reqdowntimeforMaintenanceUom\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_search?tenantId={{tenantId}}&code={{vehicleMaintenanceCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{vehicleMaintenanceCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Maintenance Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"TenantId missing hence failed\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create without regNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"TenantId missing hence failed\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":null\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create without maintenanceUom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"TenantId missing hence failed\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":null,\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create without maintenanceAfter",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"maintenanceAfter is null\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":null,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create without downtimeforMaintenanceUom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"downtimeforMaintenanceUom is null\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":null,\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Create without downtimeforMaintenance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"",
													"pm.test(\"downtimeforMaintenance is null\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":null\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenances",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"SwmProcess is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No SwmProcess Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"",
													"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"mobileNo\",mobileNo);",
													"",
													"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
													"",
													"pm.test(\"Mobile number matches\", function () {",
													"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d629ed8-afcb-43e6-be18-845b1deda9ce",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var gstNO = jsonData.vendors[0].supplier.gst;",
													"pm.environment.set(\"gstNO\",gstNO);",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(gstNO).to.include(pm.environment.get(\"contractorGst\"));",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Vendor Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_search?tenantId={{tenantId}}&vendorNo={{vendorNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "vendorNo",
													"value": "{{vendorNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var mobileNo = jsonBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"mobileNo\",mobileNo);",
													"",
													"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
													"",
													"pm.test(\"Mobile no updated successfully\", function () {",
													"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Search1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n      \t    \"vendorNo\":\"{{vendorNo}}\",\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"9999999999\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Search1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var gstNO = jsonData.vendors[0].supplier.gst;",
													"pm.environment.set(\"gstNO\",gstNO);",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(gstNO).to.include(pm.environment.get(\"contractorGst\"));",
													"});",
													"",
													"var resMobileNo = jsonData.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"resMobileNo\", resMobileNo);",
													"",
													"pm.test(\"Mobile number updated successfully\", function () {",
													"    pm.expect(resMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_search?tenantId={{tenantId}}&vendorNo={{vendorNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "vendorNo",
													"value": "{{vendorNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vendor Create with duplicate GST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"// postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errorMsg = jsonData.Errors[0].message;",
													"",
													"pm.environment.set(\"errorMsg\",errorMsg);",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"unique\");",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Vendor Create with duplicate vendor registration number\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create with duplicate vendor registration number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"// postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errorMsg = jsonData.Errors[0].message;",
													"",
													"pm.environment.set(\"errorMsg\",errorMsg);",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"unique\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":null,\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if name is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : null,\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without registrationNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if registrationNo is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":null,\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without location",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if location is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Location Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":null\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without supplier contactNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":null,\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without supplier emailId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":null,\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without supplier address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":null,\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without supplier gst",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier gst is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":null,\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without agreementDocument",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier agreementDocument is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":null\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create without servicesOffered",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if supplier agreementDocument is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Code is missing in ServicesOffered\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": null\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor Contract Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"",
													"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"mobileNo\",mobileNo);",
													"",
													"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
													"",
													"pm.test(\"Mobile number matches\", function () {",
													"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Contract Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var contractNo = jsonBody.vendorContracts[0].contractNo;",
													"",
													"pm.environment.set(\"contractNo\", contractNo);",
													"",
													"postman.setNextRequest(\"Vendor Contract Search\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var searchResContractNo = jsonData.vendorContracts[0].contractNo;",
													"pm.environment.set(\"searchResContractNo\", searchResContractNo);",
													"",
													"",
													"",
													"pm.test(\"Contract No Matches\", function () {",
													"    pm.expect(searchResContractNo).to.include(pm.environment.get(\"contractNo\"));",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Vendor Contract Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_search?tenantId={{tenantId}}&contractNo={{contractNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "contractNo",
													"value": "{{contractNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var reqBody = JSON.parse(request.data);",
													"",
													"var reqSecurityDeposit = reqBody.vendorContracts[0].securityDeposit;",
													"pm.environment.set(\"reqSecurityDeposit\", reqSecurityDeposit);",
													"",
													"",
													"var securityDeposit = jsonBody.vendorContracts[0].securityDeposit;",
													"pm.environment.set(\"securityDeposit\", securityDeposit);",
													"",
													"pm.test(\"security Deposit Updated successfully\", function () {",
													"    pm.expect(securityDeposit).to.eql(pm.environment.get(\"reqSecurityDeposit\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Contract Updated Search\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n      \t\t\"contractNo\":\"{{contractNo}}\",\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":1000,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 100,\n            \"remarks\":\"remarks should be greater\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Updated Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var searchResContractNo = jsonData.vendorContracts[0].contractNo;",
													"pm.environment.set(\"searchResContractNo\", searchResContractNo);",
													"",
													"",
													"var SearchSecurityDeposit = jsonData.vendorContracts[0].securityDeposit;",
													"pm.environment.set(\"SearchSecurityDeposit\", SearchSecurityDeposit);",
													"",
													"",
													"pm.test(\"Contract No Matches\", function () {",
													"    pm.expect(searchResContractNo).to.include(pm.environment.get(\"contractNo\"));",
													"});",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_search?tenantId={{tenantId}}&contractNo={{contractNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "contractNo",
													"value": "{{contractNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vendor Contract Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without vendorNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Vendor number is Mandatory\", function () {",
													"    pm.expect(errMsg).to.include(\"Vendor number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":null\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without contractDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if contractDate is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":null,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without contractPeriodFrom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if contractPeriodFrom is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":null,\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without contractPeriodTo",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if contractPeriodTo is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":null,\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without securityDeposit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if securityDeposit is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":null,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create without paymentAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if paymentAmount is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": null,\n            \"remarks\": null\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Refilling Pump Station Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"   if('OilCompany' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.OilCompany.length - 1;",
													"         var rand = 0;",
													"         var Vendor = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             OilCompany = jsonData.MdmsRes.swm.OilCompany[rand].code;",
													"             pm.environment.set(\"OilCompany\",OilCompany);",
													"                    }",
													"     else{",
													"          tests[\"OilCompany is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No OilCompany Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Refilling Pump Station Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var pumpStationName = jsonData.refillingPumpStations[0].name;",
													"pm.environment.set(\"pumpStationName\",pumpStationName);",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pumpStationName).to.include(pm.environment.get(\"RefillingFillingStationName\")",
													");",
													"});",
													"",
													"postman.setNextRequest(\"Refilling Pump Station Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_search?tenantId=default&code={{refillingPumpCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{refillingPumpCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var refillingPumpCode= jsonData.refillingPumpStations[0].code;",
													"pm.environment.set(\"refillingPumpCode\",refillingPumpCode);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"postman.setNextRequest(\"Refilling Pump Station Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var reqBody = JSON.parse(request.data);",
													"",
													"var reqQuantity = reqBody.refillingPumpStations[0].quantity;",
													"pm.environment.set(\"reqQuantity\", reqQuantity);",
													"",
													"",
													"var quantity = jsonBody.refillingPumpStations[0].quantity;",
													"pm.environment.set(\"quantity\", quantity);",
													"",
													"pm.test(\"security Deposit Updated successfully\", function () {",
													"    pm.expect(quantity).to.eql(pm.environment.get(\"reqQuantity\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n      \t    \"code\":\"{{refillingPumpCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Refilling Pump Station Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Create without location",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if location is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Boundary code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":null\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Create without typeOfPump",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if typeOfPump is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"typeOfPump code is mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\": null\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Create without typeOfFuel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if typeOfFuel is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"typeOfFuel code is mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":null\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"    }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }       ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Service Offered is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No Service Offered  Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var resRegNumber = jsonData.vehicles[0].regNumber;",
													"pm.environment.set(\"resRegNumber\", resRegNumber);",
													"",
													"",
													"pm.test(\"Vehicle details created successfully\", function () {",
													"    pm.expect(resRegNumber).to.include(\"regNumber\");",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Update\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_search?tenantId={{tenantId}}&regNumber={{regNumber}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "regNumber",
													"value": "{{regNumber}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var reqBody = JSON.parse(request.data);",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var reqVehicleModel = reqBody.vehicles[0].manufacturingDetails.model;",
													"pm.environment.set(\"reqVehicleModel\", reqVehicleModel);",
													"",
													"var resVehicleModel = jsonData.vehicles[0].manufacturingDetails.model;",
													"pm.environment.set(\"resVehicleModel\", resVehicleModel);",
													"",
													"",
													"pm.test(\"Vehicle model updated successfully\", function () {",
													"    pm.expect(resVehicleModel).to.include(pm.environment.get(\"reqVehicleModel\"));",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Search updated record\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "fi",
												"value": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 10,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"Honda\",\n\t            \"vehicleCapacity\":10\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Search updated record",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var resVehicleModel = jsonData.vehicles[0].manufacturingDetails.model;",
													"pm.environment.set(\"resVehicleModel\", resVehicleModel);",
													"",
													"",
													"pm.test(\"Vehicle model updated successfully\", function () {",
													"    pm.expect(resVehicleModel).to.include(pm.environment.get(\"reqVehicleModel\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_search?tenantId={{tenantId}}&regNumber={{regNumber}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "regNumber",
													"value": "{{regNumber}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Create with duplicate regNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create with duplicate ChassisNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"// postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without purchaseDate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if purchaseDate is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : null,\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create with duplicate EngineNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "http://egov-micro-dev.egovernments.org/swm-services/vehicles/_create",
											"protocol": "http",
											"host": [
												"egov-micro-dev",
												"egovernments",
												"org"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without regNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if regNumber is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"regNumber\":null,\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without vehicleType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if VehicleType is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"VehicleType Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":null\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without price",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if purchaseDate is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : null,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without fuelType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if fuelType is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"fuelType code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":null\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without operatorsReq",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if operatorsReq is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":null,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create without vendorNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if operatorsReq is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{default}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": null\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create for ULB owned vehicles",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Route Master",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "210b63c1-5379-425a-a020-de38c1cbf56e",
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3e5a476b-084c-4202-96b8-9186d332e5d6",
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67c4c2fb-33a5-49a3-b33e-10566328d287",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"    ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"    ",
													"postman.setNextRequest(\"Collection point Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3b40b6da-0de7-4c44-8032-b273f181fa0a",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 10000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 10000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 10000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85e05a4a-5b50-45ab-8f70-53ee6b2ae2db",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"var routeCode = jsonData.routes[0].code;",
													"pm.environment.set(\"routeCode\",routeCode);",
													"",
													"postman.setNextRequest(\"Route Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"RouteName = jsonData.routes[0].name;",
													"",
													"pm.environment.set(\"RouteName\",RouteName);",
													"",
													"",
													"pm.test(\"Route created successfully\", function () {",
													"    pm.expect(RouteName).to.include(pm.environment.get(\"routeName\"));",
													"});",
													"",
													"postman.setNextRequest(\"Route Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_search?tenantId={{tenantId}}&code={{routeCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{routeCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var reqBody = JSON.parse(request.data);",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var reqDistance = reqBody.routes[0].distance;",
													"pm.environment.set(\"reqDistance\", reqDistance);",
													"",
													"var resDistance = jsonData.routes[0].distance;",
													"pm.environment.set(\"resDistance\", resDistance);",
													"",
													"",
													"pm.test(\"Route Distance updated successfully\", function () {",
													"    pm.expect(resDistance).to.eql(pm.environment.get(\"reqDistance\"));",
													"});",
													"",
													"postman.setNextRequest(\"Route Search for updated record\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n      \t    \"code\":\"{{routeCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":120,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Emp Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/hr-employee/employees/_search?tenantId=default",
											"host": [
												"{{url}}"
											],
											"path": [
												"hr-employee",
												"employees",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Search for updated record",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var resDistance = jsonData.routes[0].distance;",
													"pm.environment.set(\"resDistance\", resDistance);",
													"",
													"",
													"",
													"pm.test(\"Route Distance updated successfully\", function () {",
													"    pm.expect(resDistance).to.eql(120);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_search?tenantId={{tenantId}}&code={{routeCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{routeCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Route Create with duplicate route name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"",
													"",
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"// postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);",
													"",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"// var routeCode = jsonData.routes[0].code;",
													"// pm.environment.set(\"routeCode\",routeCode);",
													"",
													"// postman.setNextRequest(\"Route Search\");",
													"",
													"postman.setNextRequest(\"Route Update\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create with starting point as dumping ground",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"// var routeCode = jsonData.routes[0].code;",
													"// pm.environment.set(\"routeCode\",routeCode);",
													"",
													"// postman.setNextRequest(\"Route Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if name is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":null,\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without Collection Type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if CollectionType is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"CollectionType Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":null\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without starting Collection point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if StartingCollectionPoint is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"StartingCollectionPoint Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":null\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without endingCollectionPoint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if EndingCollectionPoint is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"EndingCollectionPoint Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":null\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without endingDumpingGroundPoint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if DumpingGround is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"DumpingGround Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":null\n            },\n            \"distance\": 100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without distance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if distance is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":null,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create without garbageEstimate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if garbageEstimate is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :null,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Sanitation Staff Target",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c1ee7c0-e07b-450f-b9d6-88ce20d23a57",
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "326720c2-efb6-4c45-8590-557923ce0a26",
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"   if('OilCompany' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.OilCompany.length - 1;",
													"         var rand = 0;",
													"         var Vendor = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             OilCompany = jsonData.MdmsRes.swm.OilCompany[rand].code;",
													"             pm.environment.set(\"OilCompany\",OilCompany);",
													"                    }",
													"     else{",
													"          tests[\"OilCompany is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No OilCompany Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var SwmProcess = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             SwmProcess = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"SwmProcess\",SwmProcess);",
													"                    }",
													"     else{",
													"          tests[\"SwmProcess is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No SwmProcess Master is available\"] = false;",
													"        }     ",
													"        ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"    ",
													"postman.setNextRequest(\"Collection point Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53325157-e8d7-482c-a8c7-babceb015067",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4fc71eee-5856-4a55-805b-f40544f111b0",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Emp Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Emp Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/hr-employee/employees/_search?tenantId=default",
											"host": [
												"{{url}}"
											],
											"path": [
												"hr-employee",
												"employees",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"var routeCode = jsonData.routes[0].code;",
													"pm.environment.set(\"routeCode\",routeCode);",
													"",
													"postman.setNextRequest(\"Sanitation Staff Target Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var targetNo = jsonBody.sanitationStaffTargets[0].targetNo;",
													"pm.environment.set(\"targetNo\", targetNo);",
													"",
													"",
													"postman.setNextRequest(\"Sanitation Staff Target Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var resTargetNo = jsonData.sanitationStaffTargets[0].targetNo;",
													"",
													"pm.environment.set(\"resTargetNo\",resTargetNo);",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(resTargetNo).to.include(pm.environment.get(\"targetNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Sanitation Staff Target Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_search?tenantId={{tenantId}}&targetNo={{targetNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "targetNo",
													"value": "{{targetNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var reqBody = JSON.parse(request.data);",
													"",
													"var resTargetedGarbage = jsonBody.sanitationStaffTargets[0].targetedGarbage;",
													"pm.environment.set(\"resTargetedGarbage\", resTargetedGarbage);",
													"",
													"var reqTargetedGarbage = reqBody.sanitationStaffTargets[0].targetedGarbage;",
													"pm.environment.set(\"reqTargetedGarbage\", reqTargetedGarbage);",
													"",
													"",
													"pm.test(\"Targeted Garbage updated successfully\", function () {",
													"    pm.expect(resTargetedGarbage).to.eql(pm.environment.get(\"reqTargetedGarbage\"));",
													"});",
													"",
													"postman.setNextRequest(\"Sanitation Staff Target updated record Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n      \t    \"targetNo\": \"{{targetNo}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":80,\n            \"wetWaste\":100,\n            \"dryWaste\":100,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target updated record Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var resTargetedGarbage = jsonBody.sanitationStaffTargets[0].targetedGarbage;",
													"pm.environment.set(\"resTargetedGarbage\", resTargetedGarbage);",
													"",
													"pm.test(\"Targeted Garbage updated successfully\", function () {",
													"    pm.expect(resTargetedGarbage).to.eql(80);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_search?tenantId={{tenantId}}&targetNo={{targetNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "targetNo",
													"value": "{{targetNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Sanitation Staff Target Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without targetFrom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":null,\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without targetTo",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if tenantId is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":null,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without swmProcess",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if ServicesOffered is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"ServicesOffered Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":null\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without location",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if Location Code is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Location Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":null\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without Route",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if Route Code is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Route Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":null\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without Employee",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if Employee Code is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"Employee Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":null\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without CollectionPoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if CollectionPoint Code is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"CollectionPoint Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":null\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without targetedGarbage",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if targetedGarbage is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":null,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create without DumpingGround",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonBody.Errors[0].message;",
													"pm.environment.set(\"errMsg\", errMsg);",
													"",
													"",
													"pm.test(\"Error showing if DumpingGround Code is not sent\", function () {",
													"    pm.expect(errMsg).to.include(\"DumpingGround Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":null\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Transactions",
			"description": "",
			"item": [
				{
					"name": "Vehicle Fuelling Details",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5e527225-cd50-4222-8e79-eacf01ce24cd",
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70773a5e-28d3-4ccd-a09d-b473cfb285a3",
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d175d523-c2dd-4d5e-bc4c-743e109f90ce",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"    }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }       ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Service Offered is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No Service Offered  Master is available\"] = false;",
													"        }    ",
													"        ",
													"    if('OilCompany' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.OilCompany.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             OilCompany = jsonData.MdmsRes.swm.OilCompany[rand].code;",
													"             pm.environment.set(\"OilCompany\",OilCompany);",
													"                    }",
													"     else{",
													"          tests[\"OilCompany is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No OilCompany Master is available\"] = false;",
													"    }",
													"    ",
													"    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"postman.setNextRequest(\"Refilling Pump Station Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Refilling Pump Station Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var refillingPumpCode= jsonData.refillingPumpStations[0].code;",
													"pm.environment.set(\"refillingPumpCode\",refillingPumpCode);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Fuelling Detailses Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/refillingpumpstations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"refillingpumpstations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vehicleFuellingTransactionNo = jsonData.vehicleFuellingDetails[0].transactionNo;",
													"pm.environment.set(\"vehicleFuellingTransactionNo\",vehicleFuellingTransactionNo);",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Fuelling Detailses Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var resVehicleFuellingTransactionNo = jsonData.vehicleFuellingDetails[0].transactionNo;",
													"pm.environment.set(\"resVehicleFuellingTransactionNo\",resVehicleFuellingTransactionNo);",
													"",
													"",
													"pm.test(\"Veicle fuelling Details Created successfully\", function () {",
													"    pm.expect(resVehicleFuellingTransactionNo).to.include(pm.environment.get(\"vehicleFuellingTransactionNo\"));",
													"});",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Fuelling Detailses Update\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_search?tenantId={{tenantId}}&transactionNo={{vehicleFuellingTransactionNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "ids",
													"value": "b8f46f2a89a54a20931f580192323d4d",
													"equals": true,
													"disabled": true
												},
												{
													"key": "transactionNo",
													"value": "{{vehicleFuellingTransactionNo}}",
													"equals": true
												},
												{
													"key": "transactionDate",
													"value": "1508323548",
													"equals": true,
													"disabled": true
												},
												{
													"key": "vehicleType.id",
													"value": "vehicle Type 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "vehicleRegNo.id",
													"value": "vehicle Registration 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "vehicleReadingDuringFuelling",
													"value": "100",
													"equals": true,
													"disabled": true
												},
												{
													"key": "refuellingStation.id",
													"value": "RefuellingStation 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "fuelFilled",
													"value": "fuelFilled 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "typeOfFuel",
													"value": "typeOfFuel 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "totalCostIncurred",
													"value": "100",
													"equals": true,
													"disabled": true
												},
												{
													"key": "receiptNo",
													"value": "receiptNo 1 U",
													"equals": true,
													"disabled": true
												},
												{
													"key": "receiptDate",
													"value": "1508323548",
													"equals": true,
													"disabled": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var fuelFilled = jsonBody.vehicleFuellingDetails[0].fuelFilled;",
													"pm.environment.set(\"fuelFilled\",fuelFilled);",
													"",
													"var ReqFuelFilled = ReqBody.vehicleFuellingDetails[0].fuelFilled;",
													"pm.environment.set(\"ReqFuelFilled\",ReqFuelFilled);",
													"",
													"pm.test(\"Fuel details updated successfully\", function () {",
													"    pm.expect(ReqFuelFilled).to.eql(pm.environment.get(\"fuelFilled\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"transactionNo\":\"{{vehicleFuellingTransactionNo}}\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 100,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Fuelling Detailses Create without tenantId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":null,\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without transactionDate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without transactionDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : null,\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without Vehicle registration number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Vehicle registration number successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":null\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without vehicleReadingDuringFuelling",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without vehicleReadingDuringFuelling successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : null,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without RefuellingPumpStation code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without RefuellingPumpStation code successful\", function () {",
													"    pm.expect(errMsg).to.include(\"RefuellingPumpStation code required\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":null\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without fuelFilled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without fuelFilled successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : null,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without FuelType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without FuelType successful\", function () {",
													"    pm.expect(errMsg).to.include(\"FuelType Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":null\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without totalCostIncurred",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without totalCostIncurred successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":null,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without receiptNo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without receiptNo successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":null,\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without receiptDate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without receiptDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":null,\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Fuelling Detailses Create without fileStoreId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"receiptNo\",\"MH-SWM-REN-\"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without receiptDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"{{receiptNo}}\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":null\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclefuellingdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Schedule",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcf9675d-15eb-4fd7-b20b-c6d8d9b8378e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													" if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"SwmProcess is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No SwmProcess Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"    ",
													"postman.setNextRequest(\"Collection point Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f640baa-e8c0-4f94-8200-fec9aa932c4c",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "95c9b327-1cc7-4c04-8493-160016d4953d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"var routeCode = jsonData.routes[0].code;",
													"pm.environment.set(\"routeCode\",routeCode);",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Schedule Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vehicleScheduleTransactionNo = jsonData.vehicleSchedules[0].transactionNo;",
													"",
													"pm.environment.set(\"vehicleScheduleTransactionNo\",vehicleScheduleTransactionNo);",
													"",
													"postman.setNextRequest(\"Vehicle Schedule search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1506859666,\n            \"scheduledTo\" : 1512043666,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var resVehicleScheduleTransactionNo = jsonData.vehicleSchedules[0].transactionNo;",
													"",
													"pm.environment.set(\"resVehicleScheduleTransactionNo\",resVehicleScheduleTransactionNo);",
													"",
													"",
													"",
													"pm.test(\"Vehicle Schedule Created successfully\", function () {",
													"    pm.expect(resVehicleScheduleTransactionNo).to.include(pm.environment.get(\"vehicleScheduleTransactionNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Schedule Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_search?tenantId={{tenantId}}&transactionNo={{vehicleScheduleTransactionNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "transactionNo",
													"value": "{{vehicleScheduleTransactionNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var targetedGarbage = jsonBody.vehicleSchedules[0].targetedGarbage;",
													"pm.environment.set(\"targetedGarbage\",targetedGarbage);",
													"",
													"var ReqTargetedGarbage = ReqBody.vehicleSchedules[0].targetedGarbage;",
													"pm.environment.set(\"ReqTargetedGarbage\",ReqTargetedGarbage);",
													"",
													"pm.test(\"Targeted Garbage details updated successfully\", function () {",
													"    pm.expect(ReqTargetedGarbage).to.eql(pm.environment.get(\"targetedGarbage\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n      \t    \"transactionNo\": \"{{vehicleScheduleTransactionNo}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1479028412,\n            \"scheduledTo\" : 1479201212,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 10\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"scheduledFrom\" : 1510649924,\n            \"scheduledTo\" : 1511168324,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Schedule Create without scheduledFrom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without scheduledFrom successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : null,\n            \"scheduledTo\" : 1511168324,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Create without scheduledTo",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without scheduledTo successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1510649924,\n            \"scheduledTo\" : null,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Create without regNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without regNumber successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1510649924,\n            \"scheduledTo\" : 1511168324,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":null,\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Schedule Create without targetedGarbage",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without targetedGarbage successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1510649924,\n            \"scheduledTo\" : 1511168324,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"{{regNumber}}\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": null\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicleschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicleschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Repair/Maintenance details",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f115e52-0909-48fe-8946-17d133282054",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"   ",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"  ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"",
													"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"mobileNo\",mobileNo);",
													"",
													"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
													"",
													"pm.test(\"Mobile number matches\", function () {",
													"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setNextRequest(\"Vehicle Maintenance Details Create\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var MaintenaceTranCode = jsonData.vehicleMaintenanceDetails[0].code;",
													"pm.environment.set(\"MaintenaceTranCode\",MaintenaceTranCode);",
													"",
													"postman.setNextRequest(\"Vehicle Maintenance Details Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var ResponseMaintenaceTranCode = jsonData.vehicleMaintenanceDetails[0].code;",
													"pm.environment.set(\"ResponseMaintenaceTranCode\",ResponseMaintenaceTranCode);",
													"",
													"pm.test(\"Maintainence details submitted successfully\", function () {",
													"    pm.expect(ResponseMaintenaceTranCode).to.include(pm.environment.get(\"MaintenaceTranCode\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Maintenance Details Update\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_search?tenantId={{tenantId}}&code={{MaintenaceTranCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{MaintenaceTranCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var vehicleDownTimeActualUom = jsonBody.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
													"pm.environment.set(\"vehicleDownTimeActualUom\",vehicleDownTimeActualUom);",
													"",
													"var ReqvehicleDownTimeActualUom = ReqBody.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
													"pm.environment.set(\"ReqvehicleDownTimeActualUom\",ReqvehicleDownTimeActualUom);",
													"",
													"pm.test(\"vehicl eDowntime Actual updated successfully\", function () {",
													"    pm.expect(ReqvehicleDownTimeActualUom).to.include(pm.environment.get(\"vehicleDownTimeActualUom\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Maintenance Details Search Updated\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n      \t    \"code\": \"{{MaintenaceTranCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 3,\n\t\t\t\"vehicleDownTimeActualUom\": \"Hrs\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Search Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var ReqvehicleDownTimeActualUom = jsonData.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
													"pm.environment.set(\"ReqvehicleDownTimeActualUom\", ReqvehicleDownTimeActualUom);",
													"",
													"pm.test(\"vehicleDownTimeActualUom updated successfully\", function () {",
													"    pm.expect(ReqvehicleDownTimeActualUom).to.include(pm.environment.get(\"vehicleDownTimeActualUom\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_search?tenantId={{tenantId}}&code={{MaintenaceTranCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{MaintenaceTranCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Maintenance Details Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without isScheduled",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without isScheduled successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": null,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without maintenanceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without maintenanceType successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": null,\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without Vehicle Registration Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Vehicle Registration Number successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle Registration Number required\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":null\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create with invalid Vehicle Registration Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for invalid Vehicle Registration Number successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Given Vehicle is invalid\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{num}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without actualMaintenanceDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without actualMaintenanceDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": null,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without costIncurred",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without costIncurred successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":null\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without vehicleDowntimeActual",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without vehicleDowntimeActual successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": null,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without vehicleDownTimeActualUom",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without vehicleDownTimeActualUom successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": null,\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Maintenance Details Create without vehicleReadingDuringMaintenance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without vehicleReadingDuringMaintenance successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":null,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":100\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehiclemaintenancedetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle trip sheet details",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05b9c787-d56c-4dc5-a0f1-228ae927741b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													" if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"SwmProcess is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No SwmProcess Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"    ",
													"postman.setNextRequest(\"Collection point Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "06f69ecb-7f6f-4842-a41e-79e9f989b572",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64c183fd-d2ee-4609-bd25-62e63e5e3b9a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"var routeCode = jsonData.routes[0].code;",
													"pm.environment.set(\"routeCode\",routeCode);",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"postman.setNextRequest(\"Vehicle Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"postman.setNextRequest(\"Vehicle Trip Sheet Details Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"driver\":{\n\t\t\t\t\"code\":\"Driver3\"\n\t\t\t\t\n\t\t\t},\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicles/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicles",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var vehicleTripNo = jsonBody.vehicleTripSheetDetails[0].tripNo;",
													"",
													"pm.environment.set(\"vehicleTripNo\",vehicleTripNo);",
													"",
													"postman.setNextRequest(\"Vehicle Trip Sheet Details Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var resVehicleTripNo = jsonBody.vehicleTripSheetDetails[0].tripNo;",
													"",
													"pm.environment.set(\"resVehicleTripNo\",resVehicleTripNo);",
													"",
													"",
													"pm.test(\"Vehicle Trip Details created successfully\", function () {",
													"    pm.expect(resVehicleTripNo).to.include(pm.environment.get(\"vehicleTripNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vehicle Trip Sheet Details Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_search?tenantId={{tenantId}}&tripNo={{vehicleTripNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "tripNo",
													"value": "{{vehicleTripNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var exitWeight = jsonBody.vehicleTripSheetDetails[0].exitWeight;",
													"pm.environment.set(\"exitWeight\",exitWeight);",
													"",
													"var ReqExitWeight = ReqBody.vehicleTripSheetDetails[0].exitWeight;",
													"pm.environment.set(\"ReqExitWeight\",ReqExitWeight);",
													"",
													"pm.test(\"ExitWeight details updated successfully\", function () {",
													"    pm.expect(ReqExitWeight).to.eql(pm.environment.get(\"exitWeight\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"tripNo\": \"{{vehicleTripNo}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":80\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vehicle Trip Sheet Details Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":null,\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Create without Route Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5c0d246-b8c6-47af-9bf3-f6bc4ea00a24",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Route Code successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Route Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantID}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":null\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Create without Vehicle registration number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "930e5ebe-3b50-4eeb-a1dd-cf4fcebac4a5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Vehicle registration number successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantID}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":null\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vehicle Trip Sheet Details Create without vendorNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "930e5ebe-3b50-4eeb-a1dd-cf4fcebac4a5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Vehicle registration number successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantID}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":null\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vehicletripsheetdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Source Segregation",
					"description": "",
					"item": [
						{
							"name": "Functionality",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9f66ffe-853f-4bc6-a754-edd297d576a7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         var ulbCode = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"             ulbCode = jsonData.MdmsRes.swm.DumpingGround[rand].ulbs[0].code;",
													"             pm.environment.set(\"ulbCode\",ulbCode);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Source Segregation Create\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var SourceCode = jsonBody.sourceSegregations[0].code;",
													"",
													"pm.environment.set(\"SourceCode\", SourceCode);",
													"",
													"",
													"postman.setNextRequest(\"Source Segregation Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var resSourceCode = jsonBody.sourceSegregations[0].code;",
													"pm.environment.set(\"resSourceCode\", resSourceCode);",
													"",
													"",
													"",
													"pm.test(\"Source Segregation details created successfully\", function () {",
													"    pm.expect(resSourceCode).to.include(pm.environment.get(\"SourceCode\"));",
													"});",
													"",
													"postman.setNextRequest(\"Source Segregation Update\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_search?tenantId={{tenantId}}&code={{SourceCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "code",
													"value": "{{SourceCode}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"var resWetWasteCollected = jsonBody.sourceSegregations[0].wetWasteCollected;",
													"pm.environment.set(\"resWetWasteCollected\", resWetWasteCollected);",
													"",
													"var ReqWetWasteCollected = ReqBody.sourceSegregations[0].wetWasteCollected;",
													"pm.environment.set(\"ReqWetWasteCollected\",ReqWetWasteCollected);",
													"",
													"pm.test(\"Waste collection details updated successfully\", function () {",
													"    pm.expect(resWetWasteCollected).to.eql(pm.environment.get(\"ReqWetWasteCollected\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n      \t    \"code\":\"{{SourceCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":150,\n            \t\t\"dryWasteCollected\":150\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Source Segregation Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184da792-4547-4e95-808f-accc6b010e90",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"ulb\":{\n            \"code\":\"{{ulbCode}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create without ulb",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ba2f064-b4f8-4139-8482-c009c32d1f2c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without ulb successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\":null,\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create without sourceSegregationDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05bd0a5d-55fe-4094-bc1e-96d4b25c1df1",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without sourceSegregationDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":null,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create without CollectionType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67899b52-3687-420a-ab92-f238fd753aff",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without CollectionType successful\", function () {",
													"    pm.expect(errMsg).to.include(\"CollectionType Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":null\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create without wetWasteCollected",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4d2f047-3d80-4f62-98fe-b9df31d668d7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without wetWasteCollected successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":null,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Source Segregation Create without dryWasteCollected",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4d2f047-3d80-4f62-98fe-b9df31d668d7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without wetWasteCollected successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"ulb\": {\n\t\t\t\t\"code\":\"{{ulbCode}}\"\n\t\t\t},\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":null\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sourcesegregations/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sourcesegregations",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor payment details",
					"description": "",
					"item": [
						{
							"name": "Functional",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5af0be77-8752-4300-80d1-3a67147d492b",
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6699bd15-5d31-4dad-b07b-57db284d8e64",
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a83335c2-e418-425d-8968-8450b888ebe9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var serviceOffered1 = null;",
													"         var serviceOffered2 = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered1 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             serviceOffered2 = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             ",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"",
													"postman.setNextRequest(\"Vendor Create\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var ReqBody = JSON.parse(request.data);",
													"",
													"",
													"var vendorNo = jsonData.vendors[0].vendorNo;",
													"pm.environment.set(\"vendorNo\",vendorNo);",
													"",
													"",
													"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"mobileNo\",mobileNo);",
													"",
													"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
													"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
													"",
													"pm.test(\"Mobile number matches\", function () {",
													"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Contract Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendors/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendors",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Contract Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var contractNo = jsonBody.vendorContracts[0].contractNo;",
													"",
													"pm.environment.set(\"contractNo\", contractNo);",
													"",
													"postman.setNextRequest(\"Vendor Payment Details Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorcontracts/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorcontracts",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var paymentNo = jsonData.vendorPaymentDetails[0].paymentNo;",
													"pm.environment.set(\"paymentNo\", paymentNo);",
													"",
													"",
													"postman.setNextRequest(\"Vendor Payment Details Search\");",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var resPaymentNo = jsonBody.vendorPaymentDetails[0].paymentNo;",
													"pm.environment.set(\"resPaymentNo\", resPaymentNo);",
													"",
													"",
													"pm.test(\"Vendor Payment Details created successfully\", function () {",
													"    pm.expect(resPaymentNo).to.include(pm.environment.get(\"paymentNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Vendor Payment Details Update\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_search?tenantId=default&paymentNo={{paymentNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												},
												{
													"key": "paymentNo",
													"value": "{{paymentNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var reqBody = JSON.parse(request.data);",
													"",
													"var resInvoiceNo = jsonData.vendorPaymentDetails[0].invoiceNo;",
													"pm.environment.set(\"resInvoiceNo\", resInvoiceNo);",
													"",
													"",
													"var reqInvoiceNo = reqBody.vendorPaymentDetails[0].invoiceNo;",
													"pm.environment.set(\"reqInvoiceNo\", reqInvoiceNo);",
													"",
													"pm.test(\"Invoice number updated successfully\", function () {",
													"    pm.expect(resInvoiceNo).to.include(pm.environment.get(\"reqInvoiceNo\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"paymentNo\": \"{{paymentNo}}\",\n\t\t\t\"vendorContract\":{\n\t\t\t\t\"contractNo\": \"{{contractNo}}\"\n\t\t\t},\n\t\t\t\"invoiceNo\": \"AAA-VNDR-112\",\n\t\t\t\"fromDate\": 1510371526000,\n\t\t\t\"toDate\": 161039526000,\n\t\t\t\"vendorInvoiceAmount\": 20000,\n\t\t\t\"employee\":{\n\t\t\t\t\"code\": \"658039\"\n\t\t\t},\n\t\t\t\"documents\":[\n\t\t\t\t{\n\t\t\t\t\t\"fileStoreId\":\"sfsdfsdfsdf\"\n\t\t\t\t}\n\t\t\t]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Vendor Payment Details Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8af04211-e5e1-4f24-a962-c7fd8a053f2a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":null,\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without contractNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fda64bf9-00a6-4040-bde1-587234f0ec4f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without contractNo successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Vehicle Contract Number required\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": null\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without invoiceNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f0304c6-c3aa-453e-b08b-71531092c342",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without invoiceNo successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": null,\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without fromDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d096290-96cb-45f6-870c-75924c13cb2e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without fromDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": null,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without toDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d096290-96cb-45f6-870c-75924c13cb2e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without fromDate successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": null,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without vendorInvoiceAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3184503b-1f0a-4fac-8cd6-aea8da520d66",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without vendorInvoiceAmount successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": null,\n      \"employee\":{\n        \"code\": \"658039\"\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Vendor Payment Details Create without Employee code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd0ccf65-b623-45dd-8366-a5952c016480",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Employee code successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Employee code required\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n      \"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n      \"tenantId\":\"{{tenantId}}\",\n      \"vendorContract\":{\n        \"contractNo\": \"{{contractNo}}\"\n      },\n      \"invoiceNo\": \"AAA-VNDR-111\",\n      \"fromDate\": 1510371526000,\n      \"toDate\": 161039526000,\n      \"vendorInvoiceAmount\": 20000,\n      \"employee\":{\n        \"code\": null\n      },\n      \"documents\":[\n        {\n          \"fileStoreId\":\"sfsdfsdfsdf\"\n        }\n      ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"vendorpaymentdetails",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Sanitation Staff Schedule",
					"description": "",
					"item": [
						{
							"name": "Functional",
							"description": "",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de1ce5fb-aaff-4207-9afb-9e8f0ea3a672",
												"type": "text/javascript",
												"exec": [
													"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
													"    pm.environment.set(\"username\", \"2506\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
													"    pm.environment.set(\"username\", \"narasappa\");",
													"    pm.environment.set(\"password\", \"demo\");",
													"}",
													"",
													"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
													"    pm.environment.set(\"username\", \"94836\");",
													"    pm.environment.set(\"password\", \"12345678\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32ca2312-b645-4e44-8769-b67087b81e4f",
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"postman.setNextRequest(\"Get Master Data\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"type": "text",
													"value": "{{username}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "grant_type",
													"type": "text",
													"value": "password"
												},
												{
													"key": "scope",
													"type": "text",
													"value": "read"
												},
												{
													"key": "tenantId",
													"type": "text",
													"value": "{{tenantId}}"
												}
											]
										},
										"url": {
											"raw": "{{url}}/user/oauth/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"oauth",
												"token"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Master Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04248c4f-57d5-4d13-ba13-d9c6da28b457",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"  if('swm' in jsonData.MdmsRes){",
													"     if('VehicleType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.VehicleType.length - 1;",
													"         var rand = 0;",
													"         var vehicleType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             vehicleType = jsonData.MdmsRes.swm.VehicleType[rand].code;",
													"             pm.environment.set(\"vehicleType\",vehicleType);",
													"                    }",
													"     else{",
													"          tests[\"Vehicle Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No vehicleType Master is available\"] = false;",
													"        }",
													"    ",
													"    if('FuelType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.FuelType.length - 1;",
													"         var rand = 0;",
													"         var FuelType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             FuelType = jsonData.MdmsRes.swm.FuelType[rand].code;",
													"             pm.environment.set(\"FuelType\",FuelType);",
													"                    }",
													"     else{",
													"          tests[\"Fuel Type is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No fuelType Master is available\"] = false;",
													"        }",
													"        ",
													"   if('OilCompany' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.OilCompany.length - 1;",
													"         var rand = 0;",
													"         var Vendor = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             OilCompany = jsonData.MdmsRes.swm.OilCompany[rand].code;",
													"             pm.environment.set(\"OilCompany\",OilCompany);",
													"                    }",
													"     else{",
													"          tests[\"OilCompany is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No OilCompany Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('CollectionType' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.CollectionType.length - 1;",
													"         var rand = 0;",
													"         var CollectionType = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             CollectionType = jsonData.MdmsRes.swm.CollectionType[rand].code;",
													"             pm.environment.set(\"CollectionType\",CollectionType);",
													"                    }",
													"     else{",
													"          tests[\"CollectionType is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No CollectionType Master is available\"] = false;",
													"        }",
													"        ",
													"        ",
													"    if('DumpingGround' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.DumpingGround.length - 1;",
													"         var rand = 0;",
													"         var DumpingGround = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             DumpingGround = jsonData.MdmsRes.swm.DumpingGround[rand].code;",
													"             pm.environment.set(\"DumpingGround\",DumpingGround);",
													"                    }",
													"     else{",
													"          tests[\"DumpingGroundcode is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No DumpingGround Master is available\"] = false;",
													"        }    ",
													"        ",
													"        ",
													"    if('SwmProcess' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.SwmProcess.length - 1;",
													"         var rand = 0;",
													"         var SwmProcess = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             SwmProcess = jsonData.MdmsRes.swm.SwmProcess[rand].code;",
													"             pm.environment.set(\"SwmProcess\",SwmProcess);",
													"                    }",
													"     else{",
													"          tests[\"SwmProcess is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No SwmProcess Master is available\"] = false;",
													"        }   ",
													"        ",
													"        ",
													"     if('Shift' in jsonData.MdmsRes.swm){",
													"         var max = jsonData.MdmsRes.swm.Shift.length - 1;",
													"         var rand = 0;",
													"         var SwmProcess = null;",
													"         if(max > -1){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             ShiftCode = jsonData.MdmsRes.swm.Shift[rand].code;",
													"             pm.environment.set(\"ShiftCode\",ShiftCode);",
													"                    }",
													"     else{",
													"          tests[\"Shift is null\"] = false;",
													"        }",
													"    }",
													"    else{",
													"          tests[\"No Shift Master is available\"] = false;",
													"        }       ",
													"        ",
													"        ",
													"        ",
													"    }",
													"    ",
													"  else{",
													"      tests[\"No Swm Master is available\"] = false; ",
													"   }",
													"   ",
													"   ",
													"   ",
													"   ",
													"   postman.setNextRequest(\"Get Boundary Details\");",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"swm\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               },\n               {\n               \t   \"name\":\"Shift\"\n               }\n            ]\n         }\n      ]\n   }\n}"
										},
										"url": {
											"raw": "{{url}}/egov-mdms-service/v1/_search",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-mdms-service",
												"v1",
												"_search"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Get Boundary Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.Boundary.length > 0){",
													"         var max = jsonData.Boundary.length - 1;",
													"         var rand = 0;",
													"         var locationCode = null;",
													"         if(max > 0){",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode\",locationCode);",
													"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
													"             locationCode1 = jsonData.Boundary[rand].code;",
													"             pm.environment.set(\"locationCode1\",locationCode1);",
													"         }",
													"}",
													"    ",
													"postman.setNextRequest(\"Collection point Create\");",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"egov-location",
												"boundarys"
											],
											"query": [
												{
													"key": "Boundary.tenantId",
													"value": "{{tenantId}}",
													"equals": true
												},
												{
													"key": "authToken",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Collection point Create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d57a8fc5-96a5-42b9-bf81-5fe7b1c92997",
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
													"",
													"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
													"",
													"var name2 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
													"",
													"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
													"",
													"var name3 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
													"",
													"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
													"",
													"var name4 = Math.floor(Math.random() * 1000000);",
													"",
													"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
													"",
													"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92adb7b6-74ce-492b-993d-5b8251ed9cb3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"",
													"if(jsonData.collectionPoints.length > 0){",
													"         var max = jsonData.collectionPoints.length - 1;",
													"         var rand = 0;",
													"         var collectionPoints1code = null;",
													"         var collectionPoints2code = null;",
													"         var collectionPoints3code = null;",
													"         var collectionPoints4code = null;",
													"         if(max > -1){",
													"             collectionPoints1code = jsonData.collectionPoints[0].code;",
													"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
													"            ",
													"             collectionPoints2code = jsonData.collectionPoints[1].code;",
													"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
													"             ",
													"             collectionPoints3code = jsonData.collectionPoints[2].code;",
													"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
													"             ",
													"             collectionPoints4code = jsonData.collectionPoints[3].code;",
													"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
													"             ",
													"             ",
													"             tests[\"Collection Points Created successfully\"] = true;",
													"                    }",
													"}",
													"                    ",
													"else {",
													"    tests[\"No collection point found\"] = false;",
													"     }                ",
													"   ",
													"         ",
													"     postman.setNextRequest(\"Emp Search\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
										},
										"url": {
											"raw": "{{url}}/swm-services/collectionpoints/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"collectionpoints",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Emp Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"postman.setNextRequest(\"Route Create \");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/hr-employee/employees/_search?tenantId=default",
											"host": [
												"{{url}}"
											],
											"path": [
												"hr-employee",
												"employees",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Route Create ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var name1 = Math.floor(Math.random() * 10000);",
													"",
													"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonData= JSON.parse(responseBody);",
													"",
													"var routeCode = jsonData.routes[0].code;",
													"pm.environment.set(\"routeCode\",routeCode);",
													"",
													"postman.setNextRequest(\"Sanitation Staff Target Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/routes/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"routes",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Target Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var targetNo = jsonBody.sanitationStaffTargets[0].targetNo;",
													"pm.environment.set(\"targetNo\", targetNo);",
													"",
													"",
													"postman.setNextRequest(\"Sanitation Staff Schedule Create\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstafftargets",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Schedule Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var staffScheduleTransactionNo = jsonBody.sanitationStaffSchedules[0].transactionNo;",
													"pm.environment.set(\"staffScheduleTransactionNo\",staffScheduleTransactionNo);",
													"",
													"postman.setNextRequest(\"Sanitation Staff Schedule Search\")",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":\"{{targetNo}}\"\n            },\n            \"shift\" :{\n            \t\"code\":\"{{ShiftCode}}\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Schedule Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonBody = JSON.parse(responseBody);",
													"",
													"var resStaffScheduleTransactionNo = jsonBody.sanitationStaffSchedules[0].transactionNo;",
													"pm.environment.set(\"resStaffScheduleTransactionNo\",resStaffScheduleTransactionNo);",
													"",
													"",
													"pm.test(\"Staff Schedule Created Successfully\", function () {",
													"    pm.expect(resStaffScheduleTransactionNo).to.include(pm.environment.get(\"staffScheduleTransactionNo\"));",
													"});",
													"",
													"postman.setNextRequest(\"Sanitation Staff Schedule Update\")",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_search?tenantId=default&transactionNo={{staffScheduleTransactionNo}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_search"
											],
											"query": [
												{
													"key": "tenantId",
													"value": "default",
													"equals": true
												},
												{
													"key": "transactionNo",
													"value": "{{staffScheduleTransactionNo}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Schedule Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\t\"transactionNo\":\"{{staffScheduleTransactionNo}}\",\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":\"{{targetNo}}\"\n            },\n            \"shift\" :{\n            \t\"code\":\"{{ShiftCode}}\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_update",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_update"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n \t\"RequestInfo\":{\n\t\t\"apiId\":\"org.egov.pgr\",\n\t\t\"ver\":\"1.0\",\n\t\t\"ts\":\"13-04-2017 12:13:30\",\n\t\t\"action\":\"POST\",\n\t\t\"did\":\"4354648646\",\n\t\t\"key\":\"xyz\",\n\t\t\"msgId\":\"654654\",\n\t\t\"requesterId\":\"61\",\n\t\t\"authToken\": \"{{access_token}}\"\n }}"
										},
										"url": {
											"raw": "{{url}}/user/_logout?access_token={{access_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"_logout"
											],
											"query": [
												{
													"key": "access_token",
													"value": "{{access_token}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Format",
							"description": "",
							"item": [
								{
									"name": "Sanitation Staff Schedule Create without tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8a36b05-1051-486e-aa7e-6883a0c528af",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without tenantId successful\", function () {",
													"    pm.expect(errMsg).to.include(\"may not be null\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\n\t\t\t\"tenantId\":null,\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":\"{{targetNo}}\"\n            },\n            \"shift\" :{\n            \t\"code\":\"{{ShiftCode}}\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Schedule Create without targetNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6c5ebe3-3671-4d12-8389-4839b9b8d61a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without targetNo successful\", function () {",
													"    pm.expect(errMsg).to.include(\"SanitationStaffTarget is invalid\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":null\n            },\n            \"shift\" :{\n            \t\"code\":\"{{ShiftCode}}\"\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "Sanitation Staff Schedule Create without Shift Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99498a1c-d9d7-405f-b52b-1dabce340ce2",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var errMsg = jsonData.Errors[0].message;",
													"pm.environment.set(\"errMsg\",errMsg);",
													"",
													"",
													"",
													"pm.test(\"Test case for without Shift Code successful\", function () {",
													"    pm.expect(errMsg).to.include(\"Shift Code is Mandatory\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":\"{{targetNo}}\"\n            },\n            \"shift\" :{\n            \t\"code\":null\n            }\n      }\n   ]\n } "
										},
										"url": {
											"raw": "{{url}}/swm-services/sanitationstaffschedules/_create",
											"host": [
												"{{url}}"
											],
											"path": [
												"swm-services",
												"sanitationstaffschedules",
												"_create"
											]
										},
										"description": ""
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}