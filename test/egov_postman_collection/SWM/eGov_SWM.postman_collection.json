{
	"info": {
		"name": "eGov_SWM",
		"_postman_id": "7b8fa028-3835-d8f9-0fed-1637210f3075",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Masters",
			"description": "",
			"item": [
				{
					"name": "Stop Entry(Collection Point) Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"2506\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"  ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Collection point Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.collectionPoints.length > 0){",
											"         var max = jsonData.collectionPoints.length - 1;",
											"         var rand = 0;",
											"         var collectionPoints1code = null;",
											"         var collectionPoints2code = null;",
											"         var collectionPoints3code = null;",
											"         var collectionPoints4code = null;",
											"         if(max > -1){",
											"             collectionPoints1code = jsonData.collectionPoints[0].code;",
											"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
											"            ",
											"             collectionPoints2code = jsonData.collectionPoints[1].code;",
											"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
											"             ",
											"             collectionPoints3code = jsonData.collectionPoints[2].code;",
											"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
											"             ",
											"             collectionPoints4code = jsonData.collectionPoints[3].code;",
											"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
											"             ",
											"             ",
											"             tests[\"Collection Points Created successfully\"] = true;",
											"                    }",
											"}",
											"                    ",
											"else {",
											"    tests[\"No collection point found\"] = false;",
											"     }                ",
											"   ",
											"         ",
											"     postman.setNextRequest(\"Collection Point Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection Point Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var CollectionPoint1 = jsonBody.collectionPoints[0].name;",
											"",
											"pm.environment.set(\"CollectionPoint1\",CollectionPoint1);",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(CollectionPoint1).to.include(pm.environment.get(\"CollectionPoint1\"));",
											"});",
											"",
											"",
											"postman.setNextRequest(\"Collection point Update\");    "
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_search?tenantId={{tenantId}}&code={{collectionPoints1code}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{collectionPoints1code}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var description = jsonData.collectionPoints[0].collectionPointDetails[0].description;",
											"pm.environment.set(\"description\",description);",
											"",
											"",
											"postman.setNextRequest(\"Updated Collection Point Search\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n   \"collectionPoints\":[\n      {\n      \t    \"code\": \"{{collectionPoints1code}}\",\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"descriptions added\"\n\t    \t\t}\n\t\t\t]\n      }\n]\n}\n            "
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Updated Collection Point Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var updatedDescription = jsonBody.collectionPoints[0].collectionPointDetails[0].description;",
											"pm.environment.set(\"updatedDescription\",updatedDescription);",
											"",
											"pm.test(\"garbageEstimate updated successfully\", function () {",
											"    pm.expect(updatedDescription).to.include(pm.environment.get(\"description\"));",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_search?tenantId={{tenantId}}&code={{collectionPoints1code}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{collectionPoints1code}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create with duplicate bin id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Errors.length > 0){",
											"             ErrorMsg = jsonData.Errors[0].message;",
											"             pm.test(\"Collection point creation with duplicate Bin IDs has failed and test case successfull\", function () {",
											"    pm.expect(ErrorMsg).to.include(\"Duplicate BinIds in given Bin details\");",
											"});",
											"         ",
											"         tests[\"Collection point creation with duplicate Bin IDs has failed and test case successfull\"] = true;",
											"}",
											"             ",
											"             ",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create with duplicate collection point name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Errors.length > 0){",
											"         var max = jsonData.Errors.length - 1;",
											"         var rand = 0;",
											"         var ErrorMsg = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             ErrorMsg = jsonData.Errors[rand].message;",
											"             pm.test(\"Body Matching\", function () {",
											"    pm.expect(ErrorMsg).to.include(\"Already Collection point is exists\");",
											"});",
											"         }",
											"         tests[\"Already Collection point is exists and test case for duplicate collection point passed\"] = true;",
											"}",
											"             ",
											"             ",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create with duplicate RFID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Errors.length > 0){",
											"         var max = jsonData.Errors.length - 1;",
											"         var rand = 0;",
											"         var ErrorMsg = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RFID = jsonData.Errors[rand].message;",
											"             pm.test(\"Body Matching\", function () {",
											"    pm.expect(pm.jsonData.Errors[rand].message).to.include(\"Duplicate RFIDs\");",
											"});",
											"         }",
											"         tests[\"Collection point creation with Duplicate RFIDs has failed and test case successfull\"] = true;",
											"}",
											"             ",
											"             ",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"99\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without tenantId successful\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without name successful\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": null,\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without location",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without location successful\", function () {",
											"    pm.expect(errMsg).to.include(\"Location Code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":null\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without BinID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without BinID successful\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": null,\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without collection type",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without collection type successful\", function () {",
											"    pm.expect(errMsg).to.include(\"CollectionType Code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":null\n\t\t            },\n\t\t            \"garbageEstimate\" :100,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create without garbage estimate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonData.Errors[0].message;",
											"pm.environment.set(\"errMsg\",errMsg);",
											"",
											"",
											"",
											"pm.test(\"Test case for without garbage estimate successful\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 1000000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :null,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Route Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"    ",
											"postman.setNextRequest(\"Route Create \");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Create ",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData= JSON.parse(responseBody);",
											"",
											"var routeCode = jsonData.routes[0].code;",
											"pm.environment.set(\"routeCode\",routeCode);",
											"",
											"postman.setNextRequest(\"Route Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"RouteName = jsonData.routes[0].name;",
											"",
											"pm.environment.set(\"RouteName\",RouteName);",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(RouteName).to.include(pm.environment.get(\"routeName\"));",
											"});",
											"",
											"postman.setNextRequest(\"Route Create with duplicate route name\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_search?tenantId={{tenantId}}&code={{routeCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{routeCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Create with duplicate route name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData= JSON.parse(responseBody);",
											"",
											"// var routeCode = jsonData.routes[0].code;",
											"// pm.environment.set(\"routeCode\",routeCode);",
											"",
											"// postman.setNextRequest(\"Route Search\");",
											"",
											"postman.setNextRequest(\"Route Update\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"",
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"// postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"postman.setNextRequest(\"Route Create with starting point as dumping ground\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n      \t    \"code\":\"{{routeCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Create with starting point as dumping ground",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData= JSON.parse(responseBody);",
											"",
											"// var routeCode = jsonData.routes[0].code;",
											"// pm.environment.set(\"routeCode\",routeCode);",
											"",
											"// postman.setNextRequest(\"Route Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"",
											"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"mobileNo\",mobileNo);",
											"",
											"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
											"",
											"pm.test(\"Mobile number matches\", function () {",
											"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var gstNO = jsonData.vendors[0].supplier.gst;",
											"pm.environment.set(\"gstNO\",gstNO);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(gstNO).to.include(pm.environment.get(\"contractorGst\"));",
											"});",
											"",
											"var resMobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"resMobileNo\", resMobileNo);",
											"",
											"pm.test(\"Mobile number updated successfully\", function () {",
											"    pm.expect(resMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Update\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_search?tenantId={{tenantId}}&vendorNo={{vendorNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "vendorNo",
											"value": "{{vendorNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create with duplicate GST",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errorMsg = jsonData.Errors[0].message;",
											"",
											"pm.environment.set(\"errorMsg\",errorMsg);",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"unique\");",
											"});",
											"",
											"",
											"postman.setNextRequest(\"Vendor Create with duplicate vendor registration number\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"// postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create with duplicate vendor registration number",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var errorMsg = jsonData.Errors[0].message;",
											"",
											"pm.environment.set(\"errorMsg\",errorMsg);",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"unique\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"// postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"var mobileNo = jsonBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"mobileNo\",mobileNo);",
											"",
											"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
											"",
											"pm.test(\"Mobile no updated successfully\", function () {",
											"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Search1\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n      \t    \"vendorNo\":\"{{vendorNo}}\",\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"9999999999\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Search1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var gstNO = jsonData.vendors[0].supplier.gst;",
											"pm.environment.set(\"gstNO\",gstNO);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(gstNO).to.include(pm.environment.get(\"contractorGst\"));",
											"});",
											"",
											"var resMobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"resMobileNo\", resMobileNo);",
											"",
											"pm.test(\"Mobile number updated successfully\", function () {",
											"    pm.expect(resMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_search?tenantId={{tenantId}}&vendorNo={{vendorNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "vendorNo",
											"value": "{{vendorNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if tenantId is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":null,\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if name is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : null,\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without registrationNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if registrationNo is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":null,\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without location",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if location is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"Location Code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":null\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without supplier contactNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":null,\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without supplier emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":null,\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without supplier address",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier contactNo is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":null,\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without supplier gst",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier gst is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":null,\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without agreementDocument",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier agreementDocument is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":null\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create without servicesOffered",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if supplier agreementDocument is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"Code is missing in ServicesOffered\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": null\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"postman.setNextRequest(\"Vehicle Create\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_search?tenantId={{tenantId}}&regNumber={{regNumber}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "regNumber",
											"value": "{{regNumber}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Update",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "fi",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":1000\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "http://egov-micro-dev.egovernments.org/swm-services/vehicles/_update",
									"protocol": "http",
									"host": [
										"egov-micro-dev",
										"egovernments",
										"org"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create with duplicate ChassisNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"// postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "http://egov-micro-dev.egovernments.org/swm-services/vehicles/_create",
									"protocol": "http",
									"host": [
										"egov-micro-dev",
										"egovernments",
										"org"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create with duplicate EngineNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "http://egov-micro-dev.egovernments.org/swm-services/vehicles/_create",
									"protocol": "http",
									"host": [
										"egov-micro-dev",
										"egovernments",
										"org"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create with duplicate regNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "http://egov-micro-dev.egovernments.org/swm-services/vehicles/_create",
									"protocol": "http",
									"host": [
										"egov-micro-dev",
										"egovernments",
										"org"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create for ULB owned vehicles",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Refilling Pump Station Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('OilCompany' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.OilCompany.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             OilCompany = jsonData.MdmsRes.SWM.OilCompany[rand].code;",
											"             pm.environment.set(\"OilCompany\",OilCompany);",
											"                    }",
											"     else{",
											"          tests[\"OilCompany is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No OilCompany Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Refilling Pump Station Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var pumpStationName = jsonData.refillingPumpStations[0].name;",
											"pm.environment.set(\"pumpStationName\",pumpStationName);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pumpStationName).to.include(pm.environment.get(\"RefillingFillingStationName\")",
											");",
											"});",
											"",
											"postman.setNextRequest(\"Refilling Pump Station Update\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_search?tenantId=default&code={{refillingPumpCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "default",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{refillingPumpCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var refillingPumpCode= jsonData.refillingPumpStations[0].code;",
											"pm.environment.set(\"refillingPumpCode\",refillingPumpCode);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.setNextRequest(\"Refilling Pump Station Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"var reqBody = JSON.parse(request.data);",
											"",
											"var reqQuantity = reqBody.refillingPumpStations[0].quantity;",
											"pm.environment.set(\"reqQuantity\", reqQuantity);",
											"",
											"",
											"var quantity = jsonBody.refillingPumpStations[0].quantity;",
											"pm.environment.set(\"quantity\", quantity);",
											"",
											"pm.test(\"security Deposit Updated successfully\", function () {",
											"    pm.expect(quantity).to.eql(pm.environment.get(\"reqQuantity\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n      \t    \"code\":\"{{refillingPumpCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :100\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Create without tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if tenantId is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\": null,\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Create without location",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if location is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"Boundary code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":null\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Create without typeOfPump",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if typeOfPump is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"typeOfPump code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\": null\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Refilling Pump Station Create without typeOfFuel",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if typeOfFuel is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"typeOfFuel code is Mandatory\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"RefillingFillingStationName\",\"Refilling Filling Station \"+name1);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"refillingPumpStations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"name\":\"{{RefillingFillingStationName}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"typeOfPump\" :{\n            \t\"code\":\"{{OilCompany}}\"\n            },\n            \"remarks\":\"Ramarks\",\n            \"typeOfFuel\" :{\n            \t\"code\":null\n            },\n            \"quantity\" :10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/refillingpumpstations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"refillingpumpstations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Maintenance Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"type": "text",
											"value": "{{username}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "grant_type",
											"type": "text",
											"value": "password"
										},
										{
											"key": "scope",
											"type": "text",
											"value": "read"
										},
										{
											"key": "tenantId",
											"type": "text",
											"value": "{{tenantId}}"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"postman.setNextRequest(\"Vehicle Create\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1)"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"vendor name\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setNextRequest(\"Vehicle Maintenance Create\");",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var vehicleMaintenanceCode = jsonBody.vehicleMaintenances[0].code;",
											"pm.environment.set(\"vehicleMaintenanceCode\", vehicleMaintenanceCode);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var searchVehicleMaintenanceCode = jsonData.vehicleMaintenances[0].code;",
											"",
											"",
											"",
											"pm.test(\"Code matches string\", function () {",
											"    pm.expect(searchVehicleMaintenanceCode).to.include(pm.environment.get(\"vehicleMaintenanceCode\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_search?tenantId={{tenantId}}&code={{vehicleMaintenanceCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{vehicleMaintenanceCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"var reqBody = JSON.parse(request.data);",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var reqdowntimeforMaintenanceUom = reqBody.vehicleMaintenances[0].downtimeforMaintenanceUom;",
											"pm.environment.set(\"reqdowntimeforMaintenanceUom\", reqdowntimeforMaintenanceUom);",
											"",
											"var resdowntimeforMaintenanceUom = jsonData.vehicleMaintenances[0].downtimeforMaintenanceUom;",
											"pm.environment.set(\"resdowntimeforMaintenanceUom\", resdowntimeforMaintenanceUom);",
											"",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(resdowntimeforMaintenanceUom).to.include(pm.environment.get(\"reqdowntimeforMaintenanceUom\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n      \t\t\"code\":\"{{vehicleMaintenanceCode}}\",\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":120,\n            \"downtimeforMaintenanceUom\":\"Days\",\n            \"downtimeforMaintenance\":1\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Updated Vehicle Maintenance Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var reqBody = JSON.parse(request.data);",
											"",
											"",
											"var searchVehicleMaintenanceCode = jsonData.vehicleMaintenances[0].code;",
											"",
											"",
											"pm.test(\"Code matches string\", function () {",
											"    pm.expect(searchVehicleMaintenanceCode).to.include(pm.environment.get(\"vehicleMaintenanceCode\"));",
											"});",
											"",
											"",
											"var resdowntimeforMaintenanceUom = jsonData.vehicleMaintenances[0].downtimeforMaintenanceUom;",
											"pm.environment.set(\"resdowntimeforMaintenanceUom\", resdowntimeforMaintenanceUom);",
											"",
											"",
											"pm.test(\"UOM of Downtime for Maintenance updated successfully\", function () {",
											"    pm.expect(resdowntimeforMaintenanceUom).to.include(pm.environment.get(\"reqdowntimeforMaintenanceUom\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_search?tenantId={{tenantId}}&code={{vehicleMaintenanceCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{vehicleMaintenanceCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"TenantId missing hence failed\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without regNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"TenantId missing hence failed\", function () {",
											"    pm.expect(errMsg).to.include(\"Vehicle registration number is Mandatory\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":null\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without maintenanceUom",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"TenantId missing hence failed\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":null,\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without maintenanceAfter",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"maintenanceAfter is null\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":null,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without downtimeforMaintenanceUom",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"downtimeforMaintenanceUom is null\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":null,\n            \"downtimeforMaintenance\":30\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Create without downtimeforMaintenance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"",
											"pm.test(\"downtimeforMaintenance is null\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenances\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"maintenanceUom\":\"Days\",\n            \"maintenanceAfter\":1000,\n            \"downtimeforMaintenanceUom\":\"Hrs\",\n            \"downtimeforMaintenance\":null\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenances/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenances",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor Contract Master",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"type": "text",
											"value": "{{username}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "grant_type",
											"type": "text",
											"value": "password"
										},
										{
											"key": "scope",
											"type": "text",
											"value": "read"
										},
										{
											"key": "tenantId",
											"type": "text",
											"value": "{{tenantId}}"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"",
											"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"mobileNo\",mobileNo);",
											"",
											"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
											"",
											"pm.test(\"Mobile number matches\", function () {",
											"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Contract Create\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var contractNo = jsonBody.vendorContracts[0].contractNo;",
											"",
											"pm.environment.set(\"contractNo\", contractNo);",
											"",
											"postman.setNextRequest(\"Vendor Contract Search\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var searchResContractNo = jsonData.vendorContracts[0].contractNo;",
											"pm.environment.set(\"searchResContractNo\", searchResContractNo);",
											"",
											"",
											"",
											"pm.test(\"Contract No Matches\", function () {",
											"    pm.expect(searchResContractNo).to.include(pm.environment.get(\"contractNo\"));",
											"});",
											"",
											"",
											"postman.setNextRequest(\"Vendor Contract Update\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_search?tenantId={{tenantId}}&contractNo={{contractNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "contractNo",
											"value": "{{contractNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"var reqBody = JSON.parse(request.data);",
											"",
											"var reqSecurityDeposit = reqBody.vendorContracts[0].securityDeposit;",
											"pm.environment.set(\"reqSecurityDeposit\", reqSecurityDeposit);",
											"",
											"",
											"var securityDeposit = jsonBody.vendorContracts[0].securityDeposit;",
											"pm.environment.set(\"securityDeposit\", securityDeposit);",
											"",
											"pm.test(\"security Deposit Updated successfully\", function () {",
											"    pm.expect(securityDeposit).to.eql(pm.environment.get(\"reqSecurityDeposit\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Contract Updated Search\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n      \t\t\"contractNo\":\"{{contractNo}}\",\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":1000,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 100,\n            \"remarks\":\"remarks should be greater\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Updated Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var searchResContractNo = jsonData.vendorContracts[0].contractNo;",
											"pm.environment.set(\"searchResContractNo\", searchResContractNo);",
											"",
											"",
											"var SearchSecurityDeposit = jsonData.vendorContracts[0].securityDeposit;",
											"pm.environment.set(\"SearchSecurityDeposit\", SearchSecurityDeposit);",
											"",
											"",
											"pm.test(\"Contract No Matches\", function () {",
											"    pm.expect(searchResContractNo).to.include(pm.environment.get(\"contractNo\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_search?tenantId={{tenantId}}&contractNo={{contractNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "contractNo",
											"value": "{{contractNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if tenantId is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":null,\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without vendorNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Vendor number is Mandatory\", function () {",
											"    pm.expect(errMsg).to.include(\"Vendor number is Mandatory\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":null\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without contractDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if contractDate is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":null,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without contractPeriodFrom",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if contractPeriodFrom is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":null,\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without contractPeriodTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if contractPeriodTo is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":null,\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without securityDeposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if securityDeposit is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":null,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": 10000,\n            \"remarks\":\"Remakrs should be min 15\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Contract Create without paymentAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var errMsg = jsonBody.Errors[0].message;",
											"pm.environment.set(\"errMsg\", errMsg);",
											"",
											"",
											"pm.test(\"Error showing if paymentAmount is not sent\", function () {",
											"    pm.expect(errMsg).to.include(\"may not be null\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorContracts\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"contractDate\":1234567890,\n            \"contractPeriodFrom\":\"1234567890\",\n            \"contractPeriodTo\":\"1234567890\",\n            \"securityDeposit\":10,\n            \"paymentTerms\":{\n            \t\"label\":\"label\"\n            },\n            \"paymentAmount\": null,\n            \"remarks\": null\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorcontracts/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorcontracts",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Sanitation Staff Target",
					"description": "",
					"item": [
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('OilCompany' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.OilCompany.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             OilCompany = jsonData.MdmsRes.SWM.OilCompany[rand].code;",
											"             pm.environment.set(\"OilCompany\",OilCompany);",
											"                    }",
											"     else{",
											"          tests[\"OilCompany is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No OilCompany Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var SwmProcess = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             SwmProcess = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"SwmProcess\",SwmProcess);",
											"                    }",
											"     else{",
											"          tests[\"SwmProcess is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No SwmProcess Master is available\"] = false;",
											"        }     ",
											"        ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Vendor Create\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"OilCompany\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Sanitation Staff Target Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var targetNo = jsonBody.sanitationStaffTargets[0].targetNo;",
											"pm.environment.set(\"targetNo\", targetNo);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":10,\n            \"dryWaste\":10,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/sanitationstafftargets/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sanitationstafftargets",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"type": "text",
											"value": "{{username}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "grant_type",
											"type": "text",
											"value": "password"
										},
										{
											"key": "scope",
											"type": "text",
											"value": "read"
										},
										{
											"key": "tenantId",
											"type": "text",
											"value": "{{tenantId}}"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Emp Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "http://egov-micro-dev.egovernments.org/hr-employee/employees/_search?tenantId=default&code=Driver1",
									"protocol": "http",
									"host": [
										"egov-micro-dev",
										"egovernments",
										"org"
									],
									"path": [
										"hr-employee",
										"employees",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "default",
											"equals": true
										},
										{
											"key": "code",
											"value": "Driver1",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Create ",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData= JSON.parse(responseBody);",
											"",
											"var routeCode = jsonData.routes[0].code;",
											"pm.environment.set(\"routeCode\",routeCode);",
											"",
											"postman.setNextRequest(\"Route Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t{\n            \t\t\"code\" :\"{{collectionPoints1code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Sanitation Staff Target Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/sanitationstafftargets/_search?tenantId={{tenantId}}&targetNo={{targetNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sanitationstafftargets",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "targetNo",
											"value": "{{targetNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Sanitation Staff Target Update",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffTargets\":[\n      {\n      \t    \"targetNo\": \"{{targetNo}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"swmProcess\" :{\n            \t\"code\":\"{{SwmProcess}}\"\n            },\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"employee\" :{\n            \t\"code\":\"Driver1\"\n            },\n            \"targetFrom\":\"1234567890\",\n            \"targetTo\":1234567890,\n            \"targetedGarbage\":100,\n            \"wetWaste\":100,\n            \"dryWaste\":100,\n            \"dumpingGround\":{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"collectionPoints\": [\n            \t{\n            \t\t\"code\":\"{{collectionPoints1code}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{collectionPoints2code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/sanitationstafftargets/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sanitationstafftargets",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Sanitation Staff Schedule",
					"description": "",
					"item": [
						{
							"name": "Sanitation Staff Schedule Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var StaffTransactionNo = jsonBody.sanitationStaffSchedules[0].transactionNo;",
											"pm.environment.set(\"StaffTransactionNo\", StaffTransactionNo);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sanitationStaffSchedules\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"sanitationStaffTarget\" :{\n            \t\"targetNo\":\"{{targetNo}}\"\n            },\n            \"shift\" :{\n            \t\"code\":\"Fake Shift Code 1\"\n            }\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/sanitationstaffschedules/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sanitationstaffschedules",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Sanitation Staff Schedule Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/sanitationstaffschedules/_search?tenantId={{tenantId}}&transactionNo={{StaffTransactionNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sanitationstaffschedules",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "transactionNo",
											"value": "{{StaffTransactionNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Transactions",
			"description": "",
			"item": [
				{
					"name": "Vehicle Fuelling Details",
					"description": "",
					"item": [
						{
							"name": "VehicleFuellingDetailses Create",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleFuellingDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"transactionDate\" : \"1508323548\",\n             \"vehicle\" :{\n            \t\"regNumber\":\"regNumber1\"\n            },\n            \"refuellingStation\" :{\n            \t\"code\":\"{{refillingPumpCode}}\"\n            },\n            \"vehicleReadingDuringFuelling\" : 100,\n            \"fuelFilled\" : 99,\n            \"typeOfFuel\":{\n            \t\"code\":\"{{FuelType}}\"\n            \t\n            },\n            \"totalCostIncurred\":10000,\n            \"receiptNo\":\"MH-SWM-REN-00001\",\n            \"receiptDate\":\"1508323548\",\n            \"receiptCopy\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            }\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclefuellingdetails/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclefuellingdetails",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Schedule",
					"description": "",
					"item": [
						{
							"name": "Vehicle Schedule Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var transactionNo = jsonData.vehicleSchedules[0].transactionNo;",
											"",
											"pm.environment.set(\"transactionNo\",transactionNo);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1510649924,\n            \"scheduledTo\" : 1511168324,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"regNumber 13\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 100\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicleschedules/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicleschedules",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Schedule search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"RequestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicleschedules/_search?tenantId={{tenantId}}&transactionNo={{transactionNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicleschedules",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "transactionNo",
											"value": "{{transactionNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"2506\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Route Create ",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData= JSON.parse(responseBody);",
											"",
											"var routeCode = jsonData.routes[0].code;",
											"pm.environment.set(\"routeCode\",routeCode);",
											"",
											"postman.setNextRequest(\"Route Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"routeName\",\"RouteName \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"routes\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"name\":\"{{routeName}}\",\n\t\t\t\"collectionType\":\n\t\t\t{\n\t\t\t\t\"code\":\"{{CollectionType}}\"\n\t\t\t},\n            \"startingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints1code}}\"\n            },\n            \"endingCollectionPoint\" :{\n            \t\"code\":\"{{collectionPoints2code}}\"\n            },\n            \"endingDumpingGroundPoint\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"distance\":100,\n            \"garbageEstimate\" :10,\n            \"collectionPoints\":[\n            \t\n            \t{\n            \t\t\"code\" :\"{{collectionPoints3code}}\"\n            \t},\n            \t\t{\n            \t\t\"code\" :\"{{collectionPoints4code}}\"\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/routes/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"routes",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Collection point Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.collectionPoints.length > 0){",
											"         var max = jsonData.collectionPoints.length - 1;",
											"         var rand = 0;",
											"         var collectionPoints1code = null;",
											"         var collectionPoints2code = null;",
											"         var collectionPoints3code = null;",
											"         var collectionPoints4code = null;",
											"         if(max > -1){",
											"             collectionPoints1code = jsonData.collectionPoints[0].code;",
											"             pm.environment.set(\"collectionPoints1code\",collectionPoints1code);",
											"            ",
											"             collectionPoints2code = jsonData.collectionPoints[1].code;",
											"             pm.environment.set(\"collectionPoints2code\",collectionPoints2code);",
											"             ",
											"             collectionPoints3code = jsonData.collectionPoints[2].code;",
											"             pm.environment.set(\"collectionPoints3code\",collectionPoints3code);",
											"             ",
											"             collectionPoints4code = jsonData.collectionPoints[3].code;",
											"             pm.environment.set(\"collectionPoints4code\",collectionPoints4code);",
											"             ",
											"             ",
											"             tests[\"Collection Points Created successfully\"] = true;",
											"                    }",
											"}",
											"                    ",
											"else {",
											"    tests[\"No collection point found\"] = false;",
											"     }                ",
											"   ",
											"         ",
											"     postman.setNextRequest(\"Collection Point Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint1\",\"CollectionPoint \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"BinID1\",\"Bin \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"RFID1\",\"RFID \"+name1);",
											"",
											"var name2 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint2\",\"CollectionPoint \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"BinID2\",\"Bin \"+name2);",
											"",
											"postman.setEnvironmentVariable(\"RFID2\",\"RFID \"+name2);",
											"",
											"var name3 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint3\",\"CollectionPoint \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"BinID3\",\"Bin \"+name3);",
											"",
											"postman.setEnvironmentVariable(\"RFID3\",\"RFID \"+name3);",
											"",
											"var name4 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"CollectionPoint4\",\"CollectionPoint \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"BinID4\",\"Bin \"+name4);",
											"",
											"postman.setEnvironmentVariable(\"RFID4\",\"RFID \"+name4);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"collectionPoints\":[\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint1}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID1}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID1}}\",\n\t            \t\"latitude\": null,\n\t            \t\"longitude\": null\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint2}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID2}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID2}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint3}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID3}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID3}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      },\n      {\n\t\t\t\"tenantId\": \"{{tenantId}}\",\n\t\t\t\"name\": \"{{CollectionPoint4}}\",\n            \"location\" :{\n            \t\"code\":\"{{locationCode}}\"\n            },\n            \"binDetails\":[\n\t            {\n\t            \t\"assetOrBinId\": \"{{BinID4}}\",\n\t            \t\"rfidAssigned\": true,\n\t            \t\"rfid\": \"{{RFID4}}\",\n\t            \t\"latitude\": 90.1,\n\t            \t\"longitude\": 90.1\n\t            }\n            \t\n            ],\n            \"collectionPointDetails\":[\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :1000,\n\t\t            \"description\" :\"description\"\n\t    \t\t},\n\t    \t\t{\n\t\t            \"collectionType\" :{\n\t\t            \t\"code\":\"{{CollectionType}}\"\n\t\t            },\n\t\t            \"garbageEstimate\" :2000,\n\t\t            \"description\" :\"description 2\"\n\t    \t\t}\n\t\t\t]\n      }\n      ]\n            \n      }"
								},
								"url": {
									"raw": "{{url}}/swm-services/collectionpoints/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"collectionpoints",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Schedule Update",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\t\n  },\n  \"vehicleSchedules\":[\n      {\n      \t    \"transactionNo\": \"{{transactionNo}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"scheduledFrom\" : 1479028412,\n            \"scheduledTo\" : 1479201212,\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"vehicle\" :{\n            \t\"tenantId\": \"{{tenantId}}\",\n            \t\"regNumber\":\"regNumber 13\",\n            \t\"operatorsReq\": 10\n            },\n            \"targetedGarbage\": 10\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicleschedules/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicleschedules",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle Repair/Maintenance details",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"2506\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read",
											"type": "text"
										},
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"",
											"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"mobileNo\",mobileNo);",
											"",
											"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
											"",
											"pm.test(\"Mobile number matches\", function () {",
											"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vehicle Create\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setNextRequest(\"Vehicle Maintenance Details Create\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"regNumber\",\"regNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"engineSrNumber\",\"engineSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"chassisSrNumber\",\"chassisSrNumber \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"insuranceNumber\",\"MH-SWM-IN-0\"+name1);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicles\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"regNumber\":\"{{regNumber}}\",\n\t\t\t\"vehicleType\" :{\n            \t\"code\":\"{{vehicleType}}\"\n            },\n\t\t\t\"purchaseInfo\":{\n\t            \"purchaseDate\" : \"1508323548\",\n\t            \"price\" : 1000,\n\t            \"sourceOfPurchase\":\"sourceOfPurchase\"\n            },\n            \"fuelType\" :{\n            \t\"code\":\"{{FuelType}}\"\n            },\n            \"operatorsReq\":10,\n            \"vendor\": {\n                \"vendorNo\": \"{{vendorNo}}\"\n            \t},\n           \"manufacturingDetails\":{\n\t\t\t\t\"engineSrNumber\":\"{{engineSrNumber}}\",\n\t            \"chassisSrNumber\" : \"{{chassisSrNumber}}\",\n\t            \"model\":\"model\",\n\t            \"vehicleCapacity\":100\n\t\t\t},\n           \"insuranceDetails\":{\n           \t\t\"insuranceNumber\":\"{{insuranceNumber}}\",\n            \t\"insuranceValidityDate\":1546237800000,\n            \t\"insuranceDocument\":{\n            \t\t\"fileStoreId\":\"fileStoreId\"\n            \t}\n           },\n           \"kilometers\":100,\n           \"endOfWarranty\":1508323548,\n           \"remarks\":\"remarks\"\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicles/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicles",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Details Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var MaintenaceTranCode = jsonData.vehicleMaintenanceDetails[0].code;",
											"pm.environment.set(\"MaintenaceTranCode\",MaintenaceTranCode);",
											"",
											"postman.setNextRequest(\"Vehicle Maintenance Details Search\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 2,\n\t\t\t\"vehicleDownTimeActualUom\": \"days\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenancedetails",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Details Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var ResponseMaintenaceTranCode = jsonData.vehicleMaintenanceDetails[0].code;",
											"pm.environment.set(\"ResponseMaintenaceTranCode\",ResponseMaintenaceTranCode);",
											"",
											"pm.test(\"Maintainence details submitted successfully\", function () {",
											"    pm.expect(ResponseMaintenaceTranCode).to.include(pm.environment.get(\"MaintenaceTranCode\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vehicle Maintenance Details Update\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_search?tenantId={{tenantId}}&code={{MaintenaceTranCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenancedetails",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{MaintenaceTranCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Details Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"var vehicleDownTimeActualUom = jsonBody.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
											"pm.environment.set(\"vehicleDownTimeActualUom\",vehicleDownTimeActualUom);",
											"",
											"var ReqvehicleDownTimeActualUom = ReqBody.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
											"pm.environment.set(\"ReqvehicleDownTimeActualUom\",ReqvehicleDownTimeActualUom);",
											"",
											"pm.test(\"vehicl eDowntime Actual updated successfully\", function () {",
											"    pm.expect(ReqvehicleDownTimeActualUom).to.include(pm.environment.get(\"vehicleDownTimeActualUom\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vehicle Maintenance Details Search Updated\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleMaintenanceDetails\":[\n      {\n      \t    \"code\": \"{{MaintenaceTranCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"isScheduled\": false,\n\t\t\t\"maintenanceType\": \"MAINTENANCE\",\n\t\t\t\"vehicle\":{\n\t\t\t\t\"regNumber\":\"{{regNumber}}\"\n\t\t\t},\n\t\t\t\"actualMaintenanceDate\": 1510371526000,\n\t\t\t\"vehicleScheduledMaintenanceDate\": null,\n\t\t\t\"vehicleDowntimeActual\": 3,\n\t\t\t\"vehicleDownTimeActualUom\": \"Hrs\",\n\t\t\t\"vehicleReadingDuringMaintenance\":212145,\n\t\t\t\"remarks\":\"Vehicle Given for Maintenance\",\n\t\t\t\"costIncurred\":555\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenancedetails",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Maintenance Details Search Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var ReqvehicleDownTimeActualUom = jsonData.vehicleMaintenanceDetails[0].vehicleDownTimeActualUom;",
											"pm.environment.set(\"ReqvehicleDownTimeActualUom\", ReqvehicleDownTimeActualUom);",
											"",
											"pm.test(\"vehicleDownTimeActualUom updated successfully\", function () {",
											"    pm.expect(ReqvehicleDownTimeActualUom).to.include(pm.environment.get(\"vehicleDownTimeActualUom\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehiclemaintenancedetails/_search?tenantId={{tenantId}}&code={{MaintenaceTranCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehiclemaintenancedetails",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{MaintenaceTranCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vehicle trip sheet details",
					"description": "",
					"item": [
						{
							"name": "Vehicle Trip Sheet Details Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var tripNo = jsonBody.vehicleTripSheetDetails[0].tripNo;",
											"",
											"pm.environment.set(\"tripNo\",tripNo);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vehicleTripSheetDetails\":[\n      {\n      \t\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"vehicle\" :{\n            \t\"regNumber\":\"{{regNumber}}\"\n            },\n            \"vendor\" :{\n            \t\"vendorNo\":\"{{vendorNo}}\"\n            },\n            \"route\" :{\n            \t\"code\":\"{{routeCode}}\"\n            },\n            \"tripStartDate\":1234567890,\n            \"tripEndDate\":1234567890,\n            \"inTime\":1234567890,\n            \"outTime\":1234567890,\n            \"entryWeight\":100,\n            \"exitWeight\":200\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicletripsheetdetails/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicletripsheetdetails",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vehicle Trip Sheet Details Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/vehicletripsheetdetails/_search?tenantId={{tenantId}}&tripNo={{tripNo}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vehicletripsheetdetails",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "tripNo",
											"value": "{{tripNo}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Source Segregation",
					"description": "",
					"item": [
						{
							"name": "Source Segregation Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"var SourceCode = jsonBody.sourceSegregations[0].code;",
											"",
											"pm.environment.set(\"SourceCode\", SourceCode);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":100,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/sourcesegregations/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sourcesegregations",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Source Segregation Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestInfo\":{\n\t    \"action\": \"search\",\n\t    \"did\": \"\",\n\t    \"msgId\": null,\n\t    \"authToken\": \"{{access_token}}\",\n\t    \"apiId\": null,\n\t    \"ver\": null,\n\t    \"ts\": \"\",\n\t    \"key\": null\n\t \n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/swm-services/sourcesegregations/_search?tenantId={{tenantId}}&code={{SourceCode}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sourcesegregations",
										"_search"
									],
									"query": [
										{
											"key": "tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "code",
											"value": "{{SourceCode}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Source Segregation Update",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"update\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"sourceSegregations\":[\n      {\n      \t    \"code\":\"{{SourceCode}}\",\n\t\t\t\"tenantId\":\"{{tenantId}}\",\n\t\t\t\"dumpingGround\" :{\n            \t\"code\":\"{{DumpingGround}}\"\n            },\n            \"sourceSegregationDate\":1234567890,\n            \"collectionDetails\":[\n            \t{\n            \t\t\"collectionType\":{\n            \t\t\t\n            \t\t\t\"code\":\"{{CollectionType}}\"\n            \t\t\t\n            \t\t},\n            \t\t\"wetWasteCollected\":200,\n            \t\t\"dryWasteCollected\":200\n            \t}\n            ]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/sourcesegregations/_update",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"sourcesegregations",
										"_update"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vendor payment details",
					"description": "",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"postman.setNextRequest(\"Get Master Data\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if(environment.url.has(\"http://egov-micro-dev.egovernments.org\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"default\")){",
											"    pm.environment.set(\"username\", \"narasappa\");",
											"    pm.environment.set(\"password\", \"demo\");",
											"}",
											"",
											"if(environment.url.has(\"http://egov-micro-qa.egovernments.org\") && environment.tenantId.has(\"mh.rohatest\")){",
											"    pm.environment.set(\"username\", \"94836\");",
											"    pm.environment.set(\"password\", \"12345678\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic ZWdvdi11c2VyLWNsaWVudDplZ292LXVzZXItc2VjcmV0"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"type": "text",
											"value": "{{username}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "grant_type",
											"type": "text",
											"value": "password"
										},
										{
											"key": "scope",
											"type": "text",
											"value": "read"
										},
										{
											"key": "tenantId",
											"type": "text",
											"value": "{{tenantId}}"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/oauth/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"oauth",
										"token"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Master Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(responseBody);",
											"  if('SWM' in jsonData.MdmsRes){",
											"     if('VehicleType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.VehicleType.length - 1;",
											"         var rand = 0;",
											"         var vehicleType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             vehicleType = jsonData.MdmsRes.SWM.VehicleType[rand].code;",
											"             pm.environment.set(\"vehicleType\",vehicleType);",
											"                    }",
											"     else{",
											"          tests[\"Vehicle Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No vehicleType Master is available\"] = false;",
											"        }",
											"    ",
											"    if('FuelType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.FuelType.length - 1;",
											"         var rand = 0;",
											"         var FuelType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             FuelType = jsonData.MdmsRes.SWM.FuelType[rand].code;",
											"             pm.environment.set(\"FuelType\",FuelType);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }",
											"        ",
											"   if('Vendor' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.Vendor.length - 1;",
											"         var rand = 0;",
											"         var Vendor = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             Vendor = jsonData.MdmsRes.SWM.Vendor[rand].vendorNo;",
											"             pm.environment.set(\"Vendor\",Vendor);",
											"                    }",
											"     else{",
											"          tests[\"Vendor is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No Vendor Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('CollectionType' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.CollectionType.length - 1;",
											"         var rand = 0;",
											"         var CollectionType = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             CollectionType = jsonData.MdmsRes.SWM.CollectionType[rand].code;",
											"             pm.environment.set(\"CollectionType\",CollectionType);",
											"                    }",
											"     else{",
											"          tests[\"CollectionType is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No CollectionType Master is available\"] = false;",
											"        }",
											"        ",
											"        ",
											"    if('DumpingGround' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var DumpingGround = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             DumpingGround = jsonData.MdmsRes.SWM.DumpingGround[rand].code;",
											"             pm.environment.set(\"DumpingGround\",DumpingGround);",
											"                    }",
											"     else{",
											"          tests[\"DumpingGroundcode is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No DumpingGround Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    if('RefillingPumpStation' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.DumpingGround.length - 1;",
											"         var rand = 0;",
											"         var RefillingPumpStation = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             RefillingPumpStationName = jsonData.MdmsRes.SWM.RefillingPumpStation[rand].name;",
											"             pm.environment.set(\"RefillingPumpStationName\",RefillingPumpStationName);",
											"                    }",
											"     else{",
											"          tests[\"RefillingPumpStationName is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No RefillingPumpStation Master is available\"] = false;",
											"        }    ",
											"        ",
											"    if('SwmProcess' in jsonData.MdmsRes.SWM){",
											"         var max = jsonData.MdmsRes.SWM.SwmProcess.length - 1;",
											"         var rand = 0;",
											"         var serviceOffered1 = null;",
											"         var serviceOffered2 = null;",
											"         if(max > -1){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered1 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered1\",serviceOffered1);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             serviceOffered2 = jsonData.MdmsRes.SWM.SwmProcess[rand].code;",
											"             pm.environment.set(\"serviceOffered2\",serviceOffered2);",
											"                    }",
											"     else{",
											"          tests[\"Fuel Type is null\"] = false;",
											"        }",
											"    }",
											"    else{",
											"          tests[\"No fuelType Master is available\"] = false;",
											"        }    ",
											"        ",
											"        ",
											"    }",
											"    ",
											"  else{",
											"      tests[\"No Swm Master is available\"] = false; ",
											"   }",
											"   ",
											"   ",
											"   ",
											"   ",
											"   postman.setNextRequest(\"Get Boundary Details\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n   \"RequestInfo\":{  \n      \"apiId\":\"swm-services\",\n      \"ver\":null,\n      \"ts\":null,\n      \"action\":null,\n      \"did\":null,\n      \"key\":null,\n      \"msgId\":\"search with from and to values\",\n      \"authToken\":\"{{access_token}}\"\n   },\n   \"MdmsCriteria\":{  \n      \"tenantId\":\"{{tenantId}}\",\n      \"moduleDetails\":[  \n         {  \n            \"moduleName\":\"SWM\",\n            \"masterDetails\":[  \n               {  \n                  \"name\":\"CollectionPoint\"\n               },\n               {  \n                  \"name\":\"Route\"\n               },\n               {  \n                  \"name\":\"VehicleType\"\n               },\n               {  \n                  \"name\":\"Vendor\"\n               },\n               {\n               \t  \"name\":\"RefillingPumpStation\"\n               },\n               {\n               \t  \"name\":\"FuelType\"\n               },\n               {\n               \t  \"name\":\"CollectionType\"\n               },\n               {\n               \t   \"name\":\"DumpingGround\"\n               },\n               {\n               \t   \"name\":\"SwmProcess\"\n               }\n            ]\n         }\n      ]\n   }\n}"
								},
								"url": {
									"raw": "{{url}}/egov-mdms-service/v1/_search",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-mdms-service",
										"v1",
										"_search"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get Boundary Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"",
											"if(jsonData.Boundary.length > 0){",
											"         var max = jsonData.Boundary.length - 1;",
											"         var rand = 0;",
											"         var locationCode = null;",
											"         if(max > 0){",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode\",locationCode);",
											"             ",
											"             rand = Math.min( max, Math.floor(Math.random() * (max - 0 + 1) + 0) );",
											"             locationCode1 = jsonData.Boundary[rand].code;",
											"             pm.environment.set(\"locationCode1\",locationCode1);",
											"         }",
											"}",
											"",
											"postman.setNextRequest(\"Vendor Create\");"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}/egov-location/boundarys?Boundary.tenantId={{tenantId}}&authToken={{access_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"egov-location",
										"boundarys"
									],
									"query": [
										{
											"key": "Boundary.tenantId",
											"value": "{{tenantId}}",
											"equals": true
										},
										{
											"key": "authToken",
											"value": "{{access_token}}",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var ReqBody = JSON.parse(request.data);",
											"",
											"",
											"var vendorNo = jsonData.vendors[0].vendorNo;",
											"pm.environment.set(\"vendorNo\",vendorNo);",
											"",
											"",
											"var mobileNo = jsonData.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"mobileNo\",mobileNo);",
											"",
											"var ReqMobileNo = ReqBody.vendors[0].supplier.mobileNo;",
											"pm.environment.set(\"ReqMobileNo\",ReqMobileNo);",
											"",
											"pm.test(\"Mobile number matches\", function () {",
											"    pm.expect(ReqMobileNo).to.include(pm.environment.get(\"mobileNo\"));",
											"});",
											"",
											"postman.setNextRequest(\"Vendor Search\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var name1 = Math.floor(Math.random() * 10000);",
											"",
											"postman.setEnvironmentVariable(\"contractorGst\",\"contractor gst \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"contractorRegistrationNo\",\"contractor registrationNo \"+name1);",
											"",
											"postman.setEnvironmentVariable(\"vendorName\",\"Vendor Name \"+name1);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendors\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n            \"name\" : \"{{vendorName}}\",\n            \"registrationNo\":\"{{contractorRegistrationNo}}\",\n            \"details\":\"detailsasdfghjkl\",\n             \"servicedLocations\" :\n             [\n             \t{\n            \t\t\"code\":\"{{locationCode}}\"\n            \t},\n            \t{\n            \t\t\"code\":\"{{locationCode1}}\"\n            \t}\n            ],\n            \"supplier\" :{\n            \t\"email\":\"abc@xyz.com\",\n            \t\"tinNumber\":\"contractor tinNumber\",\n            \t\"gst\":\"{{contractorGst}}\",\n            \t\"mobileNo\":\"0000000000\",\n            \t\"contactNo\":\"1111111111\",\n            \t\"faxNumber\":\"2222222222\",\n            \t\"address\":\"contractor address\",\n            \t\"registrationNo\":\"Reg No 1\"\n            },\n            \"agreementDocument\":{\n            \t\"fileStoreId\":\"fileStoreId\"\n            \t\n            },\n            \"servicesOffered\":\n            [\n\t            {\n\t            \t\"code\": \"{{serviceOffered1}}\"\n\t            }\n        \t]\n    \t}\n   ]\n } \n "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendors/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendors",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Vendor Payment Details Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = JSON.parse(requestBody);",
											"",
											"var paymentNo = jsonData.vendorPaymentDetails[0].paymentNo;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"RequestInfo\":\n   {\n    \"action\": \"create\",\n    \"did\": \"\",\n    \"msgId\": null,\n    \"authToken\": \"{{access_token}}\",\n    \"apiId\": null,\n    \"ver\": null,\n    \"ts\": \"\",\n    \"key\": null,\n    \"userInfo\":{\n    \t\"id\":1\n    }\n  },\n  \"vendorPaymentDetails\":[\n      {\n\t\t\t\"tenantId\":\"default\",\n\t\t\t\"vendorContract\":{\n\t\t\t\t\"contractNo\": \"{{contractNo}}\"\n\t\t\t},\n\t\t\t\"invoiceNo\": \"AAA-VNDR-111\",\n\t\t\t\"fromDate\": 1510371526000,\n\t\t\t\"toDate\": 161039526000,\n\t\t\t\"vendorInvoiceAmount\": 20000,\n\t\t\t\"employee\":{\n\t\t\t\t\"code\": \"EMPLOYEE\"\n\t\t\t},\n\t\t\t\"documents\":[\n\t\t\t\t{\n\t\t\t\t\t\"fileStoreId\":\"sfsdfsdfsdf\"\n\t\t\t\t}\n\t\t\t]\n      }\n   ]\n } "
								},
								"url": {
									"raw": "{{url}}/swm-services/vendorpaymentdetails/_create",
									"host": [
										"{{url}}"
									],
									"path": [
										"swm-services",
										"vendorpaymentdetails",
										"_create"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}