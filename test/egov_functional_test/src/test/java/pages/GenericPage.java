package pages;

import org.apache.commons.lang.math.RandomUtils;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utils.Properties;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;

public class GenericPage extends BasePage {

    private WebDriver driver;

    public GenericPage(WebDriver driver) {
        this.driver = driver;
    }

    public void selectValue(String value) {
        String e = "//*[text()='" + value + "']";
        WebElement element = driver.findElement(By.xpath(e));
        waitForElementToBeVisible(element, driver);
        waitForElementToBeClickable(element, driver);
        element.click();
    }

    public void waitForTheElement(WebElement webElement, WebDriver webDriver) {
        WebDriverWait wait = new WebDriverWait(webDriver, Properties.waitTime);
        wait.until(ExpectedConditions.visibilityOf(webElement));
    }

    public String checkValueCanBeAutoGeneratedOrNot(String v) {
        String value = v.replaceAll("\"", "");
        if (value.contains("--")) {
            if (value.contains(",") && !value.contains("characters")) {
                value = value.split(",")[0] +
                        getRandomRandomNumber(Integer.parseInt(value.split(",")[1].replaceAll("[^0-9]+", "")));
            } else if (value.contains("characters")) {
                value = value.split(",")[0] +
                        getRandomCharacters(Integer.parseInt(value.split(",")[1].replaceAll("[^0-9]+", "")));
            } else if (value.contains("email")) {
                value = getRandomEmail();
            } else {
                value = getRandomRandomNumber(Integer.parseInt(value.replaceAll("[^0-9]+", "")));
            }
        }
        return value.replaceAll("-", "");
    }

    private String getRandomRandomNumber(int c) {
        int a = (int) Math.pow(10, c - 1);
        int b = (int) Math.pow(10, c) - 1;
        return String.valueOf(a + RandomUtils.nextInt(b));
    }

    private String getRandomCharacters(int noOfCharacters) {
        Random random = new Random();
        String[] alphabet = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", " ", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
        String required = "";

        for (int i = 0; i < noOfCharacters; i++) {
            required = required + alphabet[random.nextInt(27 - 0) + 0];
        }

        return required;
    }

    private String getRandomEmail() {
        return "email" + String.valueOf(100 + (RandomUtils.nextInt(9999))) + "@gmail.com";
    }

    public WebElement buildElement(String screen, String element, String value) throws IOException {
        WebElement webElement = null;
        String path = "src/test/resources/elements/Egov/" + screen + ".elements";
        BufferedReader in = new BufferedReader(new FileReader(path));
        String str = "";
        StringBuilder json = new StringBuilder();

        while ((str = in.readLine()) != null) {
            json.append(str);
        }
        in.close();

        JSONObject jsonObject = new JSONObject(json.toString());
        int pos = 0;

        for (int i = 0; i < jsonObject.getJSONArray("elements").length(); i++) {
            if ((jsonObject.getJSONArray("elements").getJSONObject(pos).getString("elementName").equals(element)))
                break;
            else pos++;
        }

        if (jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value").contains("%s")) {
            String locator = jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value");
            jsonObject.getJSONArray("elements").getJSONObject(pos).put("value", locator.replace("%s", value));
        }

        str = jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value");
        switch (jsonObject.getJSONArray("elements").getJSONObject(pos).getString("identifier")) {
            case "id":
                webElement = driver.findElement(By.id(str));
                break;

            case "css":
                webElement = driver.findElement(By.cssSelector(str));
                break;

            case "xpath":
                webElement = driver.findElement(By.xpath(str));
                break;

            case "linkText":
                webElement = driver.findElement(By.linkText(str));
                break;

            case "className":
                webElement = driver.findElement(By.className(str));
                break;

            case "name":
                webElement = driver.findElement(By.name(str));
                break;

            case "tagName":
                webElement = driver.findElement(By.tagName(str));
                break;

            case "partialLinkText":
                webElement = driver.findElement(By.partialLinkText(str));
                break;
        }
        return webElement;
    }
}
