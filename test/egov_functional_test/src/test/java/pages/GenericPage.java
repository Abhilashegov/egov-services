package pages;

import org.apache.commons.lang.math.RandomUtils;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import static com.jayway.awaitility.Awaitility.await;

public class GenericPage extends BasePage {

    private WebDriver driver;

    public GenericPage(WebDriver driver) {
        this.driver = driver;
    }

    public String checkValueCanBeAutoGeneratedOrNot(String v) {
        String value = v.replaceAll("\"", "");
        if (value.contains("--")) {
            if (value.contains(",") && !value.contains("characters")) {
                value = (value.split(",")[0] +
                        getRandomNumber(Integer.parseInt(value.split(",")[1].replaceAll("[^0-9]+", ""))))
                        .replaceAll("--", "");
            } else if (value.contains("characters")) {
                value = (value.split(",")[0] +
                        getRandomCharacters(Integer.parseInt(value.split(",")[1].replaceAll("[^0-9]+", ""))))
                        .replaceAll("--", "");
            } else if (value.contains("email")) {
                value = getRandomEmail().replaceAll("--", "");
            } else {
                value = getRandomNumber(Integer.parseInt(value.replaceAll("[^0-9]+", ""))).replaceAll("--", "");
            }
        }
        return value;
    }

    private String getRandomNumber(int c) {
        int a = (int) Math.pow(10, c - 1);
        int b = (int) Math.pow(10, c) - 1;
        return String.valueOf(a + RandomUtils.nextInt(b));
    }

    private String getRandomCharacters(int noOfCharacters) {
        Random random = new Random();
        String[] alphabet = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", " ", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
        String required = "";

        for (int i = 0; i < noOfCharacters; i++) {
            required = required + alphabet[random.nextInt(27 - 0)];
        }

        return required;
    }

    private String getRandomEmail() {
        return "email" + String.valueOf(100 + (RandomUtils.nextInt(9999))) + "@xyz.com";
    }

    public WebElement buildElement(String screen, String element, String value) throws IOException {
        WebElement webElement = null;
        String path = "src/test/resources/elements/Egov/" + screen + ".elements";
        BufferedReader in = new BufferedReader(new FileReader(path));
        String str = "";
        StringBuilder json = new StringBuilder();

        while ((str = in.readLine()) != null) {
            json.append(str);
        }
        in.close();

        JSONObject jsonObject = new JSONObject(json.toString());
        int pos = 0;

        for (int i = 0; i < jsonObject.getJSONArray("elements").length(); i++) {
            if ((jsonObject.getJSONArray("elements").getJSONObject(pos).getString("elementName").equals(element)))
                break;
            else pos++;
        }

        if (jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value").contains("%s")) {
            String locator = jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value");
            jsonObject.getJSONArray("elements").getJSONObject(pos).put("value", locator.replace("%s", value));
        }

        str = jsonObject.getJSONArray("elements").getJSONObject(pos).getString("value");
        switch (jsonObject.getJSONArray("elements").getJSONObject(pos).getString("identifier")) {
            case "id":
                waitForTheElementToBePresent((By.id(str)));
                webElement = driver.findElement(By.id(str));
                break;

            case "css":
                waitForTheElementToBePresent((By.cssSelector(str)));
                webElement = driver.findElement(By.cssSelector(str));
                break;

            case "xpath":
                waitForTheElementToBePresent((By.xpath(str)));
                webElement = driver.findElement(By.xpath(str));
                break;

            case "linkText":
                waitForTheElementToBePresent((By.linkText(str)));
                webElement = driver.findElement(By.linkText(str));
                break;

            case "className":
                waitForTheElementToBePresent((By.className(str)));
                webElement = driver.findElement(By.className(str));
                break;

            case "name":
                waitForTheElementToBePresent((By.name(str)));
                webElement = driver.findElement(By.name(str));
                break;

            case "tagName":
                waitForTheElementToBePresent((By.tagName(str)));
                webElement = driver.findElement(By.tagName(str));
                break;

            case "partialLinkText":
                waitForTheElementToBePresent((By.partialLinkText(str)));
                webElement = driver.findElement(By.partialLinkText(str));
                break;
        }
        return webElement;
    }

    public void clickOnDropdown(WebElement webElement, String value) {

//        do {
        clickOnButton(webElement, driver);
        await().atMost(10, TimeUnit.SECONDS).until(() -> driver.findElements(By.cssSelector("div[role=\"presentation\"]:nth-child(1) div div span div div div")).size() >= 1);
        List<WebElement> dropdown = driver.findElements(By.cssSelector("div[role=\"presentation\"]:nth-child(1) div div span div div div"));
        for (WebElement w : dropdown) {
            System.out.println(w.getText());
            if (w.getText().equals(value)) {
                try {
                    clickOnButton(w, driver);
                    break;
                } catch (Exception e) {
                    jsClick(w, driver);
                }
            }

        }

//            String element = "//*[text()='" + value + "']";
//            WebElement element1 = driver.findElement(By.xpath(element));
//            clickOnButton(element1, driver);
//        } while (!(value.equals(driver.findElement(By.xpath("//*[text()='" + value + "']")).getText())));
    }

    public void actionOnSuggestionBox(WebElement webElement, String value) {
        waitForElementToBeVisible(webElement, driver);
        webElement.sendKeys(value);
        webElement.sendKeys(Keys.ARROW_DOWN, Keys.ENTER);
    }

    public WebElement openApplication(String number) throws IOException {

        List<WebElement> totalRows;
        totalRows = buildElement("Home","dashBoardApplications","").findElements(By.tagName("tr"));
        try {
            for (WebElement applicationRow : totalRows) {
                if (applicationRow.findElements(By.tagName("td")).get(4).getText().contains(number)) {
                    return applicationRow;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        throw new RuntimeException("No application row found in Inbox -- " + number);
    }

    private void waitForTheElementToBePresent(By by) throws IOException {
        await().atMost(20, TimeUnit.SECONDS).until(() -> driver.findElements(by).size() > 0);
    }

    public void selectDate(WebElement webElement, String value) throws IOException {
        clickOnButton(webElement, driver);

        // Select Year
        if (!(getCurrentDate().split("/")[2].equals(value.split("/")[2]))) {
            String year = "//*[text()='" + value.split("/")[2] + "']";
            clickOnButton(driver.findElement(By.xpath("//*[text()='" + getCurrentDate().split("/")[2] + "']")), driver);
            waitForTheElementToBePresent(By.xpath(year));
            clickOnButton(driver.findElement(By.xpath(year)), driver);
        }

//        // Selects Month
//        String m = new SimpleDateFormat("MMM").format(Calendar.getInstance().getTime());
//        if (driver.findElements(By.xpath("//*[contains(text(),'" + m + "')]")).size() == 1)
//            System.out.println("ytfvhghujwnvkvr");

//        waitForTheElementToBePresent(By.cssSelector("[d='M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z']"));
//        clickOnButton(driver.findElement(By.cssSelector("[d='M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z']")), driver);

            // Select Date
            if (value.split("/")[0].substring(0, 1).contains("0")) {
                value = value.split("/")[0].replaceFirst("0", "");
            }
        String s = "//span[text()='" + value.split("/")[0] + "']";
            waitForTheElementToBePresent(By.xpath(s));
            clickOnButton(driver.findElement(By.xpath(s)), driver);

            // Click on Ok
            waitForTheElementToBePresent(By.xpath("//*[text()='OK']"));
            clickOnButton(driver.findElement(By.xpath("//*[text()='OK']")), driver);

        }
}
