# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  title: Asset API
  description: EGovAsset Management aims to improve the efficiency of the Asset Management operations in the ULB.This document covers.
   </br>Create Asset Category
   </br>Get Asset Category
   </br>Create New Asset. 
   </br>Get Asset.
  contact:
    name:  Ghanshyam rawat
    email: ghanshyam.rawat@riflexions.com
  version: "1.0.0"

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /assets/_search:
    post:
      summary: Get list of Asset based on below parameter.
      description: >
        Provides a list of asset for given different input params.
      parameters:
        - name: requestInfo
          in: body
          description: Request header for the service request details.
          required: true
          schema:
            $ref: '#/definitions/RequestInfo'
        - name: tenantId
          in: query
          description: Unique id for ulb.
          required: true
          type: string
          format: varchar
        - name: id
          in: query
          description: Pass List of Unique Asset id then the API will returns list of asset. Maximum length of the input list is 100.
          required: false
          type: array
          items: 
            type: integer
          format: int64
          maxItems: 100
        - name: name
          in: query
          description: Name  of the asset.
          required: false
          type: string
          format: varchar
        - name: code
          in: query
          description: Unique Asset code.
          required: false
          type: string
          format: varchar
        - name: assetCategory
          in: query
          description: AssetCategory id.
          required: false
          type: integer
          format: int64
        - name: department
          in: query
          description: Department id of the user.
          required: false
          type: integer
          format: int64
        - name: locality
          in: query
          description: lacality of the asset.
          required: false
          type: integer
          format: int64
        - name: zone
          in: query
          description: zone of the asset.
          required: false
          type: integer
          format: int64
        - name: revenueWard
          in: query
          description: RevenueWard of the asset.
          required: false
          type: integer
          format: int64
        - name: block
          in: query
          description: block of the asset.
          required: false
          type: integer
          format: int64
        - name: street
          in: query
          description: street of the asset.
          required: false
          type: integer
          format: int64
        - name: electionWard
          in: query
          description: ElectionWard of the asset.
          required: false
          type: integer
          format: int64
        - name: doorNo
          in: query
          description: Door No of the asset.
          required: false
          type: integer
          format: int64
        - name: status
          in: query
          description: Asset status description.
          required: false
          type: string
          format: varchar
      tags:
        - Asset
      responses:
        '200':
          description: Successful response, returns list of Asset.
          schema:
            $ref: '#/definitions/AssetResponse'
        '400':
          description: Invalid input.
          schema:
            $ref: '#/definitions/ErrorRes'
        
  /assets/_create:
    post:
      summary: Create New Asset.
      description: The asset master is the database of all the assets owned by the ULB. Each asset belongs to a category. The attributes of the asset category are inherited by the assets within that category..
      parameters:
        - name: Asset
          in: body
          description: Details for the new Asset.
          required: true
          schema:
            $ref: '#/definitions/AssetRequest'
      tags:
        - Asset
      responses:
        '201':
          description: Asset created
          schema:
            $ref: '#/definitions/AssetResponse'
        '400':
          description: Invalid input.
          schema:
            $ref: '#/definitions/ErrorRes'
  
  /assets/{code}/_update:
    post:
      summary: Update existing Asset.
      description: The asset master is the database of all the assets owned by the ULB. Each asset belongs to a category. The attributes of the asset category are inherited by the assets within that category. This API allow user to update the existing asset property.
      parameters:
        
        - name: code
          in: path
          required: true
          description: The unique code of the asset.
          type: integer
          format: int64
          
        - name: Asset
          in: body
          description: Details for the new Asset.
          required: true
          schema:
            $ref: '#/definitions/AssetRequest'
      tags:
        - Asset
      responses:
        '201':
          description: Asset created
          schema:
            $ref: '#/definitions/AssetResponse'
        '400':
          description: Invalid input.
          schema:
            $ref: '#/definitions/ErrorRes'
            
  /assets/assetsCategory/_create:
    post:
      summary: Create AssetCategory
      description: To create a new Asset.
      parameters:
        - name: assetCategory
          in: body
          description: Details for the new Aset.
          required: true
          schema:
            $ref: '#/definitions/AssetCategoryRequest'
        - name: tenantId
          in: query
          description: Unique id for tenant.
          required: true
          type: string
          format: varchar
      tags:
        - AssetCategory
      responses:
        '201':
          description: Asset created
          schema:
            $ref: '#/definitions/AssetCategoryResponse'
        '400':
          description: Invalid input.
          schema:
            $ref: '#/definitions/ErrorRes'
  
  /assets/assetsCategory/_search:
     post:
      summary: Get Asset Category List.
      description: >
        Provides a list of asset Category for given different input params.
      parameters:
        - name: requestInfo
          in: body
          description: Request information send into the body of the request service request details.
          required: true
          schema:
            $ref: '#/definitions/RequestInfo'
        - name: tenantId
          in: query
          description: Unique id for ulb.
          required: true
          type: string
          format: varchar
        - name: id
          in: query
          description: Pass List of Unique AssetsCategory id then the API will returns list of AssetsCategory. Maximum length of the input list is 100.
          required: false
          type: array
          items: 
            type: integer
          format: int64
          maxItems: 100
        - name: code
          in: query
          description: Unique code of AssetCategory.
          required: false
          type: string
          format: varchar
        - name: name
          in: query
          description:  AssetCategory name.
          required: false
          type: string
          format: varchar
        - name: assetCategoryType
          in: query
          description: AssetCategory Type List[IMMOVABLE, LAND,MOVABLE].Based on input type api will return the asset category, if the list is null then api should return all type of asset category.
          required: false
          type: array
          items: 
            type: string
          maxItems: 3
      tags:
        - AssetCategory
      responses:
        '200':
          description: returns list of Asset.
          schema:
            $ref: '#/definitions/AssetCategoryResponse'
        '400':
          description: Invalid input.
          schema:
            $ref: '#/definitions/ErrorRes'
  
definitions:
  Asset:
    description: Hold the asset specific information.
    type: object
    properties:
      tenantId:
        type: string
        description: Unique id for ulb.
      id:
        description: Unique id for the asset.  This will be auto generated.
        type: integer
        format: int64
      name:
        type: string
        description: Name of the Asset.
      code:
        type: string
        description: Unique code for the asset.  This will be auto generated. The format for the asset code will be given by the client in case of auto generation of asset code.
      department:
        $ref: '#/definitions/Department'
      assetCategory:
        $ref: '#/definitions/AssetCategory'
      assetDetails:
        type: string
        description: Asset details.
      modeOfAcquisition:
        type: string
        description: enumeration .
        enum:
          - ACQUIRED
          - CONSTRUCTION
          - PURCHASE
          - TENDER
          - DONATION

      status:
        type: string
        description: enumeration.
        enum:
          - CWIP
          - Cancelled
          - Capitalized
          - Created
          - Disposed
          - Retired
          - Revaluated
          - Sold
      
      grossValue:
        type: integer
        format: double
        description: gross value of the asset, applicable only if the status is Capitalized 
      accumulatedDepreciation:
        type: integer
        format: double
        description: gross value of the asset, applicable only if the status is Capitalized 
      description:
        type: string
        description: description of asset
      dateOfCreation:
        type: string
        format: date
        description: timestamp.
      locationDetails:
        $ref: '#/definitions/Location'
      remarks:
        type: string
        description: asset remarks
      length:
        type: string
        description: Length of the Land and Shop assets.
      width:
        type: string
        description: Width of the Land and Shop assets.
      totalArea:
        type: string
        description: Total area of Land and Shop assets.
      properties:
        type: string
        description: Additional information of the asset.Hold the data for dynamic custom field in JSON format. There key and value will be LABEL NAME and USER INPUT DATA respactively. 
  Department:
    type: object
    description: List of departments in the ULB
    properties:
      id:
        type: integer
        format: int64
        description: Unique identifier of the department
      name:
        type: string
        description: Name of the department.
      code:
        type: string
        description: Department code.
        
  AssetCategory:
    type: object
    description: Categories defined under asset category type are shown in the drop down.
    properties:
      tenantId:
        type: string
        description: Unique id for ulb.
      id:
        type: integer
        format: int64
        description: Unique identifier of Category
      name:
        type: string
        description: Name of the AssetCategory.
      code:
        type: string
        description: Unique code for the asset category.  This will be auto generated or specified by the user based on implementation specific requirement.
      assetCategoryType:      
        type: string
        description: enumartion.
        enum:
          - LAND
          - MOVABLE
          - IMMOVABLE
      parent:      
        type: integer
        format: int64
        description: Options will be the list of asset category in the master.
      depreciationMethod:
        type: string
        description: Depreciation Method id.
        enum:
          - Straight Line Method
          - Written down Value method
      assetAccount:
        type: integer
        format: int64
        description: Options are from the  chart of account master for the configured purpose id.
      accumulatedDepreciationAccount:
        type: integer
        format: int64
        description: Options are from the  chart of account master for the configured purpose id.
      revaluationReserveAccount:
        type: integer
        format: int64
        description: Options are from the  chart of account master for the configured purpose id.
      depreciationExpenseAccount:
        type: integer
        format: int64
        description: Options are from the  chart of account master for the configured purpose id.
      unitOfMeasurement:
        type: integer
        format: int64
        description: Options are from UOM.
      depreciationRate:
        type: array
        description: Multiple rows can be specified for each  asset category, but there should not be an overlap in the rates for the same financial year.
        items:
          $ref: '#/definitions/DepreciationMetaData'
      customFields:
        type: array
        items:
          $ref: '#/definitions/AssetCategoryCustomFields'
        description: Custom Fields.
    required:
      - assetCategoryType
      - name
      - code
      - revaluationReserveAccount
 
 # need clarification about the DepreciationMetaData
  DepreciationMetaData:
    type: object
    properties:
    #depreciationRate will be float
      depreciationRate:
        type: integer
        format: int64
        description: Depreciation rate of the asset should be entered, It will be a float value.
      financialYear:      
        type: string
        description: Required if depreciation rate is specified,Options are the list of financial years.
      usefulLifeInYears:      
        type: integer
        format: int64
        description: Calculated value based on the percentage.
        
  Location:
    description: Hold the asset location specific information.
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Unique identifier of the asset location.
      locality:
        type: integer
        format: int64
        description: Boundary location id.
      zone:
        type: integer
        format: int64
        description: Boundary zone id.
      revenueWard:      
        type: integer
        format: int64
        description: Boundary revenueward id.
      block:
        type: integer
        format: int64
        description: Boundary blick id.
      street:
        type: integer
        format: int64
        description: Boundary street id.
      electionWard:      
        type: integer
        format: int64
        description: Boundary election ward id.
      doorNo:
        type: integer
        format: int64
        description: Boundary door number.
      pinCode:      
        type: integer
        format: int32
        description: pin code of the location.
  
  AssetCategoryCustomFields:
    description: Hold the Asset dynamic fields details as list of json object.
    type: object
    properties:
      name:
        type: string
        description: name of the custom dynamic field (label name).
      type:
        type: string
        description: type of the custom field.
      isActive:
        type: boolean
        description: .
      isMandatory:      
        type: boolean
        description: value will be true if field is mandatory otherwise false.
      values:
        type: string
        description: .
      localText:
        type: string
        description: .
      regExFormate:      
        type: string
        description: .

  AssetRequest:
    properties:
      ResposneInfo:
        $ref: '#/definitions/RequestInfo'
      Assets:
          $ref: '#/definitions/Asset'
    type: object      
 
  AssetResponse:
    properties:
      ResposneInfo:
        $ref: '#/definitions/ResponseInfo'
      Assets:
        type: array
        items:
          $ref: '#/definitions/Asset'
    type: object
    
    
  AssetCategoryRequest:
    properties:
      ResposneInfo:
        $ref: '#/definitions/RequestInfo'
      AssetCategory:
          $ref: '#/definitions/AssetCategory'
    type: object 
  
  AssetCategoryResponse:
    properties:
      ResposneInfo:
        $ref: '#/definitions/ResponseInfo'
      AssetCategory:
        type: array
        items:
          $ref: '#/definitions/AssetCategory'
    type: object
        
    
  RequestInfo:
    type: object
    properties:
      apiId:
        type: string
        description: unique API ID
      ver:
        type: string
        description: API version
      ts:
        type: string
        description: >-
          response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn (timezone defaulted to
          +5.30)
      action:
        type: string
        description: api action like GET/POST/PUT/DELETE in case of http calls
      did:
        type: string
        description: device UUID from which API is called
      key:
        type: string
        description: API key (dynamic)
      msgId:
        type: string
        description: 'unique request message id, UUID, for handling API idempotency'
      requesterId:
        type: string
        description: UserId of the user calling
      authToken:
        type: string
        description: //session/jwt/saml token/oauth token
    required:
      - apiId
      - ver
      - ts
  
  ResponseInfo:
    type: object
    properties:
      apiId:
        type: string
        description: unique API ID
      ver:
        type: string
        description: API version
      ts:
        type: string
        description: >-
          response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn (timezone defaulted to
          +5.30)
      resMsgId:
        type: string
        description: unique response message id (UUID)
      msgId:
        type: string
        description: message id of the request
      status:
        type: string
        description: 'status of request e.g. successful, failed etc'
    required:
      - apiId
      - ver
      - ts
      - status
      
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      description:
        type: string
      filelds:
        type: object
    required:
      - code
      - message
      
  ErrorRes:
    properties:
      ResposneInfo:
        $ref: '#/definitions/ResponseInfo'
      Error:
        $ref: '#/definitions/Error'
    type: object

